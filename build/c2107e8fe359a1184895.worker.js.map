{"version":3,"sources":["webpack:///c2107e8fe359a1184895.worker.js","webpack:///webpack/bootstrap c2107e8fe359a1184895","webpack:///./node_modules/terriajs-cesium/Source/ThirdParty/Workers/deflate.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","obj","Tree","gen_bitlen","h","bits","xbits","f","tree","that","dyn_tree","stree","stat_desc","static_tree","extra","extra_bits","base","extra_base","max_length","overflow","MAX_BITS","bl_count","heap","heap_max","HEAP_SIZE","max_code","opt_len","static_len","bi_reverse","code","len","res","gen_codes","next_code","this","build_tree","node","elems","heap_len","depth","Math","floor","pqdownheap","max","StaticTree","Config","good_length","max_lazy","nice_length","max_chain","func","smaller","tn2","tm2","Deflate","lm_init","window_size","w_size","head","hash_size","max_lazy_match","config_table","level","good_match","nice_match","max_chain_length","strstart","block_start","lookahead","match_length","prev_length","MIN_MATCH","match_available","ins_h","init_block","L_CODES","dyn_ltree","D_CODES","dyn_dtree","BL_CODES","bl_tree","END_BLOCK","last_lit","matches","tr_init","l_desc","static_l_desc","d_desc","static_d_desc","bl_desc","static_bl_desc","bi_buf","bi_valid","last_eob_len","scan_tree","curlen","prevlen","nextlen","count","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","build_bl_tree","max_blindex","bl_order","put_byte","pending_buf","pending","put_short","w","putShortMSB","b","send_bits","value","length","val","Buf_size","send_code","c2","send_tree","send_all_trees","lcodes","dcodes","blcodes","rank","bi_flush","_tr_align","STATIC_TREES","static_ltree","_tr_tally","dist","lc","out_length","in_length","dcode","d_buf","l_buf","_length_code","LITERALS","d_code","extra_dbits","lit_bufsize","compress_block","ltree","dtree","lx","extra_lbits","base_length","base_dist","bi_windup","copy_block","buf","header","set","window","subarray","_tr_stored_block","stored_len","eof","STORED_BLOCK","_tr_flush_block","opt_lenb","static_lenb","static_dtree","DYN_TREES","flush_block_only","strm","flush_pending","fill_window","more","MIN_LOOKAHEAD","match_start","prev","avail_in","read_buf","hash_shift","hash_mask","deflate_stored","flush","max_start","max_block_size","pending_buf_size","Z_NO_FLUSH","NeedMore","avail_out","Z_FINISH","FinishStarted","FinishDone","BlockDone","longest_match","cur_match","match","chain_length","scan","best_len","limit","_nice_match","wmask","w_mask","strend","MAX_MATCH","scan_end1","scan_end","deflate_fast","bflush","hash_head","strategy","Z_HUFFMAN_ONLY","deflate_slow","max_insert","prev_match","Z_FILTERED","deflateReset","total_in","total_out","msg","pending_out","status","BUSY_STATE","last_flush","Z_OK","method","w_bits","hash_bits","k","v","j","deflateInit","_level","_method","memLevel","_strategy","Z_DEFLATED","DEF_MEM_LEVEL","Z_DEFAULT_STRATEGY","Z_DEFAULT_COMPRESSION","MAX_MEM_LEVEL","Z_STREAM_ERROR","dstate","Uint8Array","deflateEnd","INIT_STATE","FINISH_STATE","Z_DATA_ERROR","deflateParams","err","deflate","Z_PARTIAL_FLUSH","deflateSetDictionary","dictionary","dictLength","index","_strm","level_flags","old_flush","bstate","next_out","next_in","z_errmsg","Z_NEED_DICT","Z_BUF_ERROR","PRESET_DICT","STORED","FAST","SLOW","Z_FULL_FLUSH","Z_STREAM_END","ZStream","next_in_index","next_out_index","Deflater","z","append","data","onprogress","array","buffers","lastIndex","bufferIndex","bufferSize","push","forEach","chunk","_dist_code","extra_blbits","ret","start","size","deflater","zip","addEventListener","event","message","init","postMessage","oninit","onappend","current","progress","onflush","self"],"mappings":"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AAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAC9I,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAyOtG3R,GAAKyI,cAAiB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GACpJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAChJ,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GA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AG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAC7I,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAC/I,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAC/I,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAC7I,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAChJ,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EACjJ,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,IAAK,EAAG,I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","file":"c2107e8fe359a1184895.worker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"build/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/*\r\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\r\n\r\n Redistribution and use in source and binary forms, with or without\r\n modification, are permitted provided that the following conditions are met:\r\n\r\n 1. Redistributions of source code must retain the above copyright notice,\r\n this list of conditions and the following disclaimer.\r\n\r\n 2. Redistributions in binary form must reproduce the above copyright \r\n notice, this list of conditions and the following disclaimer in \r\n the documentation and/or other materials provided with the distribution.\r\n\r\n 3. The names of the authors may not be used to endorse or promote products\r\n derived from this software without specific prior written permission.\r\n\r\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\r\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\r\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\r\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/*\r\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\r\n * JZlib is based on zlib-1.1.3, so all credit should go authors\r\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\r\n * and contributors of zlib.\r\n */\r\n\r\n(function(obj) {\r\n\r\n\t// Global\r\n\r\n\tvar MAX_BITS = 15;\r\n\tvar D_CODES = 30;\r\n\tvar BL_CODES = 19;\r\n\r\n\tvar LENGTH_CODES = 29;\r\n\tvar LITERALS = 256;\r\n\tvar L_CODES = (LITERALS + 1 + LENGTH_CODES);\r\n\tvar HEAP_SIZE = (2 * L_CODES + 1);\r\n\r\n\tvar END_BLOCK = 256;\r\n\r\n\t// Bit length codes must not exceed MAX_BL_BITS bits\r\n\tvar MAX_BL_BITS = 7;\r\n\r\n\t// repeat previous bit length 3-6 times (2 bits of repeat count)\r\n\tvar REP_3_6 = 16;\r\n\r\n\t// repeat a zero length 3-10 times (3 bits of repeat count)\r\n\tvar REPZ_3_10 = 17;\r\n\r\n\t// repeat a zero length 11-138 times (7 bits of repeat count)\r\n\tvar REPZ_11_138 = 18;\r\n\r\n\t// The lengths of the bit length codes are sent in order of decreasing\r\n\t// probability, to avoid transmitting the lengths for unused bit\r\n\t// length codes.\r\n\r\n\tvar Buf_size = 8 * 2;\r\n\r\n\t// JZlib version : \"1.0.2\"\r\n\tvar Z_DEFAULT_COMPRESSION = -1;\r\n\r\n\t// compression strategy\r\n\tvar Z_FILTERED = 1;\r\n\tvar Z_HUFFMAN_ONLY = 2;\r\n\tvar Z_DEFAULT_STRATEGY = 0;\r\n\r\n\tvar Z_NO_FLUSH = 0;\r\n\tvar Z_PARTIAL_FLUSH = 1;\r\n\tvar Z_FULL_FLUSH = 3;\r\n\tvar Z_FINISH = 4;\r\n\r\n\tvar Z_OK = 0;\r\n\tvar Z_STREAM_END = 1;\r\n\tvar Z_NEED_DICT = 2;\r\n\tvar Z_STREAM_ERROR = -2;\r\n\tvar Z_DATA_ERROR = -3;\r\n\tvar Z_BUF_ERROR = -5;\r\n\r\n\t// Tree\r\n\r\n\t// see definition of array dist_code below\r\n\tvar _dist_code = [ 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\r\n\t\t\t10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\r\n\t\t\t12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\r\n\t\t\t13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\r\n\t\t\t14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\r\n\t\t\t14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r\n\t\t\t15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19,\r\n\t\t\t20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\r\n\t\t\t24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\r\n\t\t\t26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,\r\n\t\t\t27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\r\n\t\t\t28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29,\r\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\r\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 ];\r\n\r\n\tfunction Tree() {\r\n\t\tvar that = this;\r\n\r\n\t\t// dyn_tree; // the dynamic tree\r\n\t\t// max_code; // largest code with non zero frequency\r\n\t\t// stat_desc; // the corresponding static tree\r\n\r\n\t\t// Compute the optimal bit lengths for a tree and update the total bit\r\n\t\t// length\r\n\t\t// for the current block.\r\n\t\t// IN assertion: the fields freq and dad are set, heap[heap_max] and\r\n\t\t// above are the tree nodes sorted by increasing frequency.\r\n\t\t// OUT assertions: the field len is set to the optimal bit length, the\r\n\t\t// array bl_count contains the frequencies for each bit length.\r\n\t\t// The length opt_len is updated; static_len is also updated if stree is\r\n\t\t// not null.\r\n\t\tfunction gen_bitlen(s) {\r\n\t\t\tvar tree = that.dyn_tree;\r\n\t\t\tvar stree = that.stat_desc.static_tree;\r\n\t\t\tvar extra = that.stat_desc.extra_bits;\r\n\t\t\tvar base = that.stat_desc.extra_base;\r\n\t\t\tvar max_length = that.stat_desc.max_length;\r\n\t\t\tvar h; // heap index\r\n\t\t\tvar n, m; // iterate over the tree elements\r\n\t\t\tvar bits; // bit length\r\n\t\t\tvar xbits; // extra bits\r\n\t\t\tvar f; // frequency\r\n\t\t\tvar overflow = 0; // number of elements with bit length too large\r\n\r\n\t\t\tfor (bits = 0; bits <= MAX_BITS; bits++)\r\n\t\t\t\ts.bl_count[bits] = 0;\r\n\r\n\t\t\t// In a first pass, compute the optimal bit lengths (which may\r\n\t\t\t// overflow in the case of the bit length tree).\r\n\t\t\ttree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap\r\n\r\n\t\t\tfor (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\r\n\t\t\t\tn = s.heap[h];\r\n\t\t\t\tbits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\r\n\t\t\t\tif (bits > max_length) {\r\n\t\t\t\t\tbits = max_length;\r\n\t\t\t\t\toverflow++;\r\n\t\t\t\t}\r\n\t\t\t\ttree[n * 2 + 1] = bits;\r\n\t\t\t\t// We overwrite tree[n*2+1] which is no longer needed\r\n\r\n\t\t\t\tif (n > that.max_code)\r\n\t\t\t\t\tcontinue; // not a leaf node\r\n\r\n\t\t\t\ts.bl_count[bits]++;\r\n\t\t\t\txbits = 0;\r\n\t\t\t\tif (n >= base)\r\n\t\t\t\t\txbits = extra[n - base];\r\n\t\t\t\tf = tree[n * 2];\r\n\t\t\t\ts.opt_len += f * (bits + xbits);\r\n\t\t\t\tif (stree)\r\n\t\t\t\t\ts.static_len += f * (stree[n * 2 + 1] + xbits);\r\n\t\t\t}\r\n\t\t\tif (overflow === 0)\r\n\t\t\t\treturn;\r\n\r\n\t\t\t// This happens for example on obj2 and pic of the Calgary corpus\r\n\t\t\t// Find the first bit length which could increase:\r\n\t\t\tdo {\r\n\t\t\t\tbits = max_length - 1;\r\n\t\t\t\twhile (s.bl_count[bits] === 0)\r\n\t\t\t\t\tbits--;\r\n\t\t\t\ts.bl_count[bits]--; // move one leaf down the tree\r\n\t\t\t\ts.bl_count[bits + 1] += 2; // move one overflow item as its brother\r\n\t\t\t\ts.bl_count[max_length]--;\r\n\t\t\t\t// The brother of the overflow item also moves one step up,\r\n\t\t\t\t// but this does not affect bl_count[max_length]\r\n\t\t\t\toverflow -= 2;\r\n\t\t\t} while (overflow > 0);\r\n\r\n\t\t\tfor (bits = max_length; bits !== 0; bits--) {\r\n\t\t\t\tn = s.bl_count[bits];\r\n\t\t\t\twhile (n !== 0) {\r\n\t\t\t\t\tm = s.heap[--h];\r\n\t\t\t\t\tif (m > that.max_code)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tif (tree[m * 2 + 1] != bits) {\r\n\t\t\t\t\t\ts.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\r\n\t\t\t\t\t\ttree[m * 2 + 1] = bits;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tn--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Reverse the first len bits of a code, using straightforward code (a\r\n\t\t// faster\r\n\t\t// method would use a table)\r\n\t\t// IN assertion: 1 <= len <= 15\r\n\t\tfunction bi_reverse(code, // the value to invert\r\n\t\tlen // its bit length\r\n\t\t) {\r\n\t\t\tvar res = 0;\r\n\t\t\tdo {\r\n\t\t\t\tres |= code & 1;\r\n\t\t\t\tcode >>>= 1;\r\n\t\t\t\tres <<= 1;\r\n\t\t\t} while (--len > 0);\r\n\t\t\treturn res >>> 1;\r\n\t\t}\r\n\r\n\t\t// Generate the codes for a given tree and bit counts (which need not be\r\n\t\t// optimal).\r\n\t\t// IN assertion: the array bl_count contains the bit length statistics for\r\n\t\t// the given tree and the field len is set for all tree elements.\r\n\t\t// OUT assertion: the field code is set for all tree elements of non\r\n\t\t// zero code length.\r\n\t\tfunction gen_codes(tree, // the tree to decorate\r\n\t\tmax_code, // largest code with non zero frequency\r\n\t\tbl_count // number of codes at each bit length\r\n\t\t) {\r\n\t\t\tvar next_code = []; // next code value for each\r\n\t\t\t// bit length\r\n\t\t\tvar code = 0; // running code value\r\n\t\t\tvar bits; // bit index\r\n\t\t\tvar n; // code index\r\n\t\t\tvar len;\r\n\r\n\t\t\t// The distribution counts are first used to generate the code values\r\n\t\t\t// without bit reversal.\r\n\t\t\tfor (bits = 1; bits <= MAX_BITS; bits++) {\r\n\t\t\t\tnext_code[bits] = code = ((code + bl_count[bits - 1]) << 1);\r\n\t\t\t}\r\n\r\n\t\t\t// Check that the bit counts in bl_count are consistent. The last code\r\n\t\t\t// must be all ones.\r\n\t\t\t// Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\r\n\t\t\t// \"inconsistent bit counts\");\r\n\t\t\t// Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\r\n\r\n\t\t\tfor (n = 0; n <= max_code; n++) {\r\n\t\t\t\tlen = tree[n * 2 + 1];\r\n\t\t\t\tif (len === 0)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t// Now reverse the bits\r\n\t\t\t\ttree[n * 2] = bi_reverse(next_code[len]++, len);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Construct one Huffman tree and assigns the code bit strings and lengths.\r\n\t\t// Update the total bit length for the current block.\r\n\t\t// IN assertion: the field freq is set for all tree elements.\r\n\t\t// OUT assertions: the fields len and code are set to the optimal bit length\r\n\t\t// and corresponding code. The length opt_len is updated; static_len is\r\n\t\t// also updated if stree is not null. The field max_code is set.\r\n\t\tthat.build_tree = function(s) {\r\n\t\t\tvar tree = that.dyn_tree;\r\n\t\t\tvar stree = that.stat_desc.static_tree;\r\n\t\t\tvar elems = that.stat_desc.elems;\r\n\t\t\tvar n, m; // iterate over heap elements\r\n\t\t\tvar max_code = -1; // largest code with non zero frequency\r\n\t\t\tvar node; // new node being created\r\n\r\n\t\t\t// Construct the initial heap, with least frequent element in\r\n\t\t\t// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\r\n\t\t\t// heap[0] is not used.\r\n\t\t\ts.heap_len = 0;\r\n\t\t\ts.heap_max = HEAP_SIZE;\r\n\r\n\t\t\tfor (n = 0; n < elems; n++) {\r\n\t\t\t\tif (tree[n * 2] !== 0) {\r\n\t\t\t\t\ts.heap[++s.heap_len] = max_code = n;\r\n\t\t\t\t\ts.depth[n] = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttree[n * 2 + 1] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// The pkzip format requires that at least one distance code exists,\r\n\t\t\t// and that at least one bit should be sent even if there is only one\r\n\t\t\t// possible code. So to avoid special checks later on we force at least\r\n\t\t\t// two codes of non zero frequency.\r\n\t\t\twhile (s.heap_len < 2) {\r\n\t\t\t\tnode = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\r\n\t\t\t\ttree[node * 2] = 1;\r\n\t\t\t\ts.depth[node] = 0;\r\n\t\t\t\ts.opt_len--;\r\n\t\t\t\tif (stree)\r\n\t\t\t\t\ts.static_len -= stree[node * 2 + 1];\r\n\t\t\t\t// node is 0 or 1 so it does not have extra bits\r\n\t\t\t}\r\n\t\t\tthat.max_code = max_code;\r\n\r\n\t\t\t// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\r\n\t\t\t// establish sub-heaps of increasing lengths:\r\n\r\n\t\t\tfor (n = Math.floor(s.heap_len / 2); n >= 1; n--)\r\n\t\t\t\ts.pqdownheap(tree, n);\r\n\r\n\t\t\t// Construct the Huffman tree by repeatedly combining the least two\r\n\t\t\t// frequent nodes.\r\n\r\n\t\t\tnode = elems; // next internal node of the tree\r\n\t\t\tdo {\r\n\t\t\t\t// n = node of least frequency\r\n\t\t\t\tn = s.heap[1];\r\n\t\t\t\ts.heap[1] = s.heap[s.heap_len--];\r\n\t\t\t\ts.pqdownheap(tree, 1);\r\n\t\t\t\tm = s.heap[1]; // m = node of next least frequency\r\n\r\n\t\t\t\ts.heap[--s.heap_max] = n; // keep the nodes sorted by frequency\r\n\t\t\t\ts.heap[--s.heap_max] = m;\r\n\r\n\t\t\t\t// Create a new node father of n and m\r\n\t\t\t\ttree[node * 2] = (tree[n * 2] + tree[m * 2]);\r\n\t\t\t\ts.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;\r\n\t\t\t\ttree[n * 2 + 1] = tree[m * 2 + 1] = node;\r\n\r\n\t\t\t\t// and insert the new node in the heap\r\n\t\t\t\ts.heap[1] = node++;\r\n\t\t\t\ts.pqdownheap(tree, 1);\r\n\t\t\t} while (s.heap_len >= 2);\r\n\r\n\t\t\ts.heap[--s.heap_max] = s.heap[1];\r\n\r\n\t\t\t// At this point, the fields freq and dad are set. We can now\r\n\t\t\t// generate the bit lengths.\r\n\r\n\t\t\tgen_bitlen(s);\r\n\r\n\t\t\t// The field len is now set, we can generate the bit codes\r\n\t\t\tgen_codes(tree, that.max_code, s.bl_count);\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tTree._length_code = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16,\r\n\t\t\t16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20,\r\n\t\t\t20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\r\n\t\t\t22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\r\n\t\t\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\r\n\t\t\t25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\r\n\t\t\t26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28 ];\r\n\r\n\tTree.base_length = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0 ];\r\n\r\n\tTree.base_dist = [ 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384,\r\n\t\t\t24576 ];\r\n\r\n\t// Mapping from a distance to a distance code. dist is the distance - 1 and\r\n\t// must not have side effects. _dist_code[256] and _dist_code[257] are never\r\n\t// used.\r\n\tTree.d_code = function(dist) {\r\n\t\treturn ((dist) < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >>> 7)]);\r\n\t};\r\n\r\n\t// extra bits for each length code\r\n\tTree.extra_lbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 ];\r\n\r\n\t// extra bits for each distance code\r\n\tTree.extra_dbits = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\r\n\r\n\t// extra bits for each bit length code\r\n\tTree.extra_blbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7 ];\r\n\r\n\tTree.bl_order = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\r\n\r\n\t// StaticTree\r\n\r\n\tfunction StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {\r\n\t\tvar that = this;\r\n\t\tthat.static_tree = static_tree;\r\n\t\tthat.extra_bits = extra_bits;\r\n\t\tthat.extra_base = extra_base;\r\n\t\tthat.elems = elems;\r\n\t\tthat.max_length = max_length;\r\n\t}\r\n\r\n\tStaticTree.static_ltree = [ 12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8,\r\n\t\t\t130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42,\r\n\t\t\t8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8,\r\n\t\t\t22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8,\r\n\t\t\t222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113,\r\n\t\t\t8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8,\r\n\t\t\t69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8,\r\n\t\t\t173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9,\r\n\t\t\t51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9,\r\n\t\t\t427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379,\r\n\t\t\t9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23,\r\n\t\t\t9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9,\r\n\t\t\t399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9,\r\n\t\t\t223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7,\r\n\t\t\t40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8,\r\n\t\t\t99, 8, 227, 8 ];\r\n\r\n\tStaticTree.static_dtree = [ 0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5,\r\n\t\t\t25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5 ];\r\n\r\n\tStaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\r\n\r\n\tStaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);\r\n\r\n\tStaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);\r\n\r\n\t// Deflate\r\n\r\n\tvar MAX_MEM_LEVEL = 9;\r\n\tvar DEF_MEM_LEVEL = 8;\r\n\r\n\tfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\r\n\t\tvar that = this;\r\n\t\tthat.good_length = good_length;\r\n\t\tthat.max_lazy = max_lazy;\r\n\t\tthat.nice_length = nice_length;\r\n\t\tthat.max_chain = max_chain;\r\n\t\tthat.func = func;\r\n\t}\r\n\r\n\tvar STORED = 0;\r\n\tvar FAST = 1;\r\n\tvar SLOW = 2;\r\n\tvar config_table = [ new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST),\r\n\t\t\tnew Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW),\r\n\t\t\tnew Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW) ];\r\n\r\n\tvar z_errmsg = [ \"need dictionary\", // Z_NEED_DICT\r\n\t// 2\r\n\t\"stream end\", // Z_STREAM_END 1\r\n\t\"\", // Z_OK 0\r\n\t\"\", // Z_ERRNO (-1)\r\n\t\"stream error\", // Z_STREAM_ERROR (-2)\r\n\t\"data error\", // Z_DATA_ERROR (-3)\r\n\t\"\", // Z_MEM_ERROR (-4)\r\n\t\"buffer error\", // Z_BUF_ERROR (-5)\r\n\t\"\",// Z_VERSION_ERROR (-6)\r\n\t\"\" ];\r\n\r\n\t// block not completed, need more input or more output\r\n\tvar NeedMore = 0;\r\n\r\n\t// block flush performed\r\n\tvar BlockDone = 1;\r\n\r\n\t// finish started, need only more output at next deflate\r\n\tvar FinishStarted = 2;\r\n\r\n\t// finish done, accept no more input or output\r\n\tvar FinishDone = 3;\r\n\r\n\t// preset dictionary flag in zlib header\r\n\tvar PRESET_DICT = 0x20;\r\n\r\n\tvar INIT_STATE = 42;\r\n\tvar BUSY_STATE = 113;\r\n\tvar FINISH_STATE = 666;\r\n\r\n\t// The deflate compression method\r\n\tvar Z_DEFLATED = 8;\r\n\r\n\tvar STORED_BLOCK = 0;\r\n\tvar STATIC_TREES = 1;\r\n\tvar DYN_TREES = 2;\r\n\r\n\tvar MIN_MATCH = 3;\r\n\tvar MAX_MATCH = 258;\r\n\tvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\r\n\r\n\tfunction smaller(tree, n, m, depth) {\r\n\t\tvar tn2 = tree[n * 2];\r\n\t\tvar tm2 = tree[m * 2];\r\n\t\treturn (tn2 < tm2 || (tn2 == tm2 && depth[n] <= depth[m]));\r\n\t}\r\n\r\n\tfunction Deflate() {\r\n\r\n\t\tvar that = this;\r\n\t\tvar strm; // pointer back to this zlib stream\r\n\t\tvar status; // as the name implies\r\n\t\t// pending_buf; // output still pending\r\n\t\tvar pending_buf_size; // size of pending_buf\r\n\t\t// pending_out; // next pending byte to output to the stream\r\n\t\t// pending; // nb of bytes in the pending buffer\r\n\t\tvar method; // STORED (for zip only) or DEFLATED\r\n\t\tvar last_flush; // value of flush param for previous deflate call\r\n\r\n\t\tvar w_size; // LZ77 window size (32K by default)\r\n\t\tvar w_bits; // log2(w_size) (8..16)\r\n\t\tvar w_mask; // w_size - 1\r\n\r\n\t\tvar window;\r\n\t\t// Sliding window. Input bytes are read into the second half of the window,\r\n\t\t// and move to the first half later to keep a dictionary of at least wSize\r\n\t\t// bytes. With this organization, matches are limited to a distance of\r\n\t\t// wSize-MAX_MATCH bytes, but this ensures that IO is always\r\n\t\t// performed with a length multiple of the block size. Also, it limits\r\n\t\t// the window size to 64K, which is quite useful on MSDOS.\r\n\t\t// To do: use the user input buffer as sliding window.\r\n\r\n\t\tvar window_size;\r\n\t\t// Actual size of window: 2*wSize, except when the user input buffer\r\n\t\t// is directly used as sliding window.\r\n\r\n\t\tvar prev;\r\n\t\t// Link to older string with same hash index. To limit the size of this\r\n\t\t// array to 64K, this link is maintained only for the last 32K strings.\r\n\t\t// An index in this array is thus a window index modulo 32K.\r\n\r\n\t\tvar head; // Heads of the hash chains or NIL.\r\n\r\n\t\tvar ins_h; // hash index of string to be inserted\r\n\t\tvar hash_size; // number of elements in hash table\r\n\t\tvar hash_bits; // log2(hash_size)\r\n\t\tvar hash_mask; // hash_size-1\r\n\r\n\t\t// Number of bits by which ins_h must be shifted at each input\r\n\t\t// step. It must be such that after MIN_MATCH steps, the oldest\r\n\t\t// byte no longer takes part in the hash key, that is:\r\n\t\t// hash_shift * MIN_MATCH >= hash_bits\r\n\t\tvar hash_shift;\r\n\r\n\t\t// Window position at the beginning of the current output block. Gets\r\n\t\t// negative when the window is moved backwards.\r\n\r\n\t\tvar block_start;\r\n\r\n\t\tvar match_length; // length of best match\r\n\t\tvar prev_match; // previous match\r\n\t\tvar match_available; // set if previous match exists\r\n\t\tvar strstart; // start of string to insert\r\n\t\tvar match_start; // start of matching string\r\n\t\tvar lookahead; // number of valid bytes ahead in window\r\n\r\n\t\t// Length of the best match at previous step. Matches not greater than this\r\n\t\t// are discarded. This is used in the lazy match evaluation.\r\n\t\tvar prev_length;\r\n\r\n\t\t// To speed up deflation, hash chains are never searched beyond this\r\n\t\t// length. A higher limit improves compression ratio but degrades the speed.\r\n\t\tvar max_chain_length;\r\n\r\n\t\t// Attempt to find a better match only when the current match is strictly\r\n\t\t// smaller than this value. This mechanism is used only for compression\r\n\t\t// levels >= 4.\r\n\t\tvar max_lazy_match;\r\n\r\n\t\t// Insert new strings in the hash table only if the match length is not\r\n\t\t// greater than this length. This saves time but degrades compression.\r\n\t\t// max_insert_length is used only for compression levels <= 3.\r\n\r\n\t\tvar level; // compression level (1..9)\r\n\t\tvar strategy; // favor or force Huffman coding\r\n\r\n\t\t// Use a faster search when the previous match is longer than this\r\n\t\tvar good_match;\r\n\r\n\t\t// Stop searching when current match exceeds this\r\n\t\tvar nice_match;\r\n\r\n\t\tvar dyn_ltree; // literal and length tree\r\n\t\tvar dyn_dtree; // distance tree\r\n\t\tvar bl_tree; // Huffman tree for bit lengths\r\n\r\n\t\tvar l_desc = new Tree(); // desc for literal tree\r\n\t\tvar d_desc = new Tree(); // desc for distance tree\r\n\t\tvar bl_desc = new Tree(); // desc for bit length tree\r\n\r\n\t\t// that.heap_len; // number of elements in the heap\r\n\t\t// that.heap_max; // element of largest frequency\r\n\t\t// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\r\n\t\t// The same heap array is used to build all trees.\r\n\r\n\t\t// Depth of each subtree used as tie breaker for trees of equal frequency\r\n\t\tthat.depth = [];\r\n\r\n\t\tvar l_buf; // index for literals or lengths */\r\n\r\n\t\t// Size of match buffer for literals/lengths. There are 4 reasons for\r\n\t\t// limiting lit_bufsize to 64K:\r\n\t\t// - frequencies can be kept in 16 bit counters\r\n\t\t// - if compression is not successful for the first block, all input\r\n\t\t// data is still in the window so we can still emit a stored block even\r\n\t\t// when input comes from standard input. (This can also be done for\r\n\t\t// all blocks if lit_bufsize is not greater than 32K.)\r\n\t\t// - if compression is not successful for a file smaller than 64K, we can\r\n\t\t// even emit a stored file instead of a stored block (saving 5 bytes).\r\n\t\t// This is applicable only for zip (not gzip or zlib).\r\n\t\t// - creating new Huffman trees less frequently may not provide fast\r\n\t\t// adaptation to changes in the input data statistics. (Take for\r\n\t\t// example a binary file with poorly compressible code followed by\r\n\t\t// a highly compressible string table.) Smaller buffer sizes give\r\n\t\t// fast adaptation but have of course the overhead of transmitting\r\n\t\t// trees more frequently.\r\n\t\t// - I can't count above 4\r\n\t\tvar lit_bufsize;\r\n\r\n\t\tvar last_lit; // running index in l_buf\r\n\r\n\t\t// Buffer for distances. To simplify the code, d_buf and l_buf have\r\n\t\t// the same number of elements. To use different lengths, an extra flag\r\n\t\t// array would be necessary.\r\n\r\n\t\tvar d_buf; // index of pendig_buf\r\n\r\n\t\t// that.opt_len; // bit length of current block with optimal trees\r\n\t\t// that.static_len; // bit length of current block with static trees\r\n\t\tvar matches; // number of string matches in current block\r\n\t\tvar last_eob_len; // bit length of EOB code for last block\r\n\r\n\t\t// Output buffer. bits are inserted starting at the bottom (least\r\n\t\t// significant bits).\r\n\t\tvar bi_buf;\r\n\r\n\t\t// Number of valid bits in bi_buf. All bits above the last valid bit\r\n\t\t// are always zero.\r\n\t\tvar bi_valid;\r\n\r\n\t\t// number of codes at each bit length for an optimal tree\r\n\t\tthat.bl_count = [];\r\n\r\n\t\t// heap used to build the Huffman trees\r\n\t\tthat.heap = [];\r\n\r\n\t\tdyn_ltree = [];\r\n\t\tdyn_dtree = [];\r\n\t\tbl_tree = [];\r\n\r\n\t\tfunction lm_init() {\r\n\t\t\tvar i;\r\n\t\t\twindow_size = 2 * w_size;\r\n\r\n\t\t\thead[hash_size - 1] = 0;\r\n\t\t\tfor (i = 0; i < hash_size - 1; i++) {\r\n\t\t\t\thead[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\t// Set the default configuration parameters:\r\n\t\t\tmax_lazy_match = config_table[level].max_lazy;\r\n\t\t\tgood_match = config_table[level].good_length;\r\n\t\t\tnice_match = config_table[level].nice_length;\r\n\t\t\tmax_chain_length = config_table[level].max_chain;\r\n\r\n\t\t\tstrstart = 0;\r\n\t\t\tblock_start = 0;\r\n\t\t\tlookahead = 0;\r\n\t\t\tmatch_length = prev_length = MIN_MATCH - 1;\r\n\t\t\tmatch_available = 0;\r\n\t\t\tins_h = 0;\r\n\t\t}\r\n\r\n\t\tfunction init_block() {\r\n\t\t\tvar i;\r\n\t\t\t// Initialize the trees.\r\n\t\t\tfor (i = 0; i < L_CODES; i++)\r\n\t\t\t\tdyn_ltree[i * 2] = 0;\r\n\t\t\tfor (i = 0; i < D_CODES; i++)\r\n\t\t\t\tdyn_dtree[i * 2] = 0;\r\n\t\t\tfor (i = 0; i < BL_CODES; i++)\r\n\t\t\t\tbl_tree[i * 2] = 0;\r\n\r\n\t\t\tdyn_ltree[END_BLOCK * 2] = 1;\r\n\t\t\tthat.opt_len = that.static_len = 0;\r\n\t\t\tlast_lit = matches = 0;\r\n\t\t}\r\n\r\n\t\t// Initialize the tree data structures for a new zlib stream.\r\n\t\tfunction tr_init() {\r\n\r\n\t\t\tl_desc.dyn_tree = dyn_ltree;\r\n\t\t\tl_desc.stat_desc = StaticTree.static_l_desc;\r\n\r\n\t\t\td_desc.dyn_tree = dyn_dtree;\r\n\t\t\td_desc.stat_desc = StaticTree.static_d_desc;\r\n\r\n\t\t\tbl_desc.dyn_tree = bl_tree;\r\n\t\t\tbl_desc.stat_desc = StaticTree.static_bl_desc;\r\n\r\n\t\t\tbi_buf = 0;\r\n\t\t\tbi_valid = 0;\r\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\r\n\r\n\t\t\t// Initialize the first block of the first file:\r\n\t\t\tinit_block();\r\n\t\t}\r\n\r\n\t\t// Restore the heap property by moving down the tree starting at node k,\r\n\t\t// exchanging a node with the smallest of its two sons if necessary,\r\n\t\t// stopping\r\n\t\t// when the heap property is re-established (each father smaller than its\r\n\t\t// two sons).\r\n\t\tthat.pqdownheap = function(tree, // the tree to restore\r\n\t\tk // node to move down\r\n\t\t) {\r\n\t\t\tvar heap = that.heap;\r\n\t\t\tvar v = heap[k];\r\n\t\t\tvar j = k << 1; // left son of k\r\n\t\t\twhile (j <= that.heap_len) {\r\n\t\t\t\t// Set j to the smallest of the two sons:\r\n\t\t\t\tif (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t\t// Exit if v is smaller than both sons\r\n\t\t\t\tif (smaller(tree, v, heap[j], that.depth))\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t// Exchange v with the smallest son\r\n\t\t\t\theap[k] = heap[j];\r\n\t\t\t\tk = j;\r\n\t\t\t\t// And continue down the tree, setting j to the left son of k\r\n\t\t\t\tj <<= 1;\r\n\t\t\t}\r\n\t\t\theap[k] = v;\r\n\t\t};\r\n\r\n\t\t// Scan a literal or distance tree to determine the frequencies of the codes\r\n\t\t// in the bit length tree.\r\n\t\tfunction scan_tree(tree,// the tree to be scanned\r\n\t\tmax_code // and its largest code of non zero frequency\r\n\t\t) {\r\n\t\t\tvar n; // iterates over all tree elements\r\n\t\t\tvar prevlen = -1; // last emitted length\r\n\t\t\tvar curlen; // length of current code\r\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\r\n\t\t\tvar count = 0; // repeat count of the current code\r\n\t\t\tvar max_count = 7; // max repeat count\r\n\t\t\tvar min_count = 4; // min repeat count\r\n\r\n\t\t\tif (nextlen === 0) {\r\n\t\t\t\tmax_count = 138;\r\n\t\t\t\tmin_count = 3;\r\n\t\t\t}\r\n\t\t\ttree[(max_code + 1) * 2 + 1] = 0xffff; // guard\r\n\r\n\t\t\tfor (n = 0; n <= max_code; n++) {\r\n\t\t\t\tcurlen = nextlen;\r\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\r\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else if (count < min_count) {\r\n\t\t\t\t\tbl_tree[curlen * 2] += count;\r\n\t\t\t\t} else if (curlen !== 0) {\r\n\t\t\t\t\tif (curlen != prevlen)\r\n\t\t\t\t\t\tbl_tree[curlen * 2]++;\r\n\t\t\t\t\tbl_tree[REP_3_6 * 2]++;\r\n\t\t\t\t} else if (count <= 10) {\r\n\t\t\t\t\tbl_tree[REPZ_3_10 * 2]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbl_tree[REPZ_11_138 * 2]++;\r\n\t\t\t\t}\r\n\t\t\t\tcount = 0;\r\n\t\t\t\tprevlen = curlen;\r\n\t\t\t\tif (nextlen === 0) {\r\n\t\t\t\t\tmax_count = 138;\r\n\t\t\t\t\tmin_count = 3;\r\n\t\t\t\t} else if (curlen == nextlen) {\r\n\t\t\t\t\tmax_count = 6;\r\n\t\t\t\t\tmin_count = 3;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmax_count = 7;\r\n\t\t\t\t\tmin_count = 4;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Construct the Huffman tree for the bit lengths and return the index in\r\n\t\t// bl_order of the last bit length code to send.\r\n\t\tfunction build_bl_tree() {\r\n\t\t\tvar max_blindex; // index of last bit length code of non zero freq\r\n\r\n\t\t\t// Determine the bit length frequencies for literal and distance trees\r\n\t\t\tscan_tree(dyn_ltree, l_desc.max_code);\r\n\t\t\tscan_tree(dyn_dtree, d_desc.max_code);\r\n\r\n\t\t\t// Build the bit length tree:\r\n\t\t\tbl_desc.build_tree(that);\r\n\t\t\t// opt_len now includes the length of the tree representations, except\r\n\t\t\t// the lengths of the bit lengths codes and the 5+5+4 bits for the\r\n\t\t\t// counts.\r\n\r\n\t\t\t// Determine the number of bit length codes to send. The pkzip format\r\n\t\t\t// requires that at least 4 bit length codes be sent. (appnote.txt says\r\n\t\t\t// 3 but the actual value used is 4.)\r\n\t\t\tfor (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\r\n\t\t\t\tif (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// Update opt_len to include the bit length tree and counts\r\n\t\t\tthat.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\r\n\r\n\t\t\treturn max_blindex;\r\n\t\t}\r\n\r\n\t\t// Output a byte on the stream.\r\n\t\t// IN assertion: there is enough room in pending_buf.\r\n\t\tfunction put_byte(p) {\r\n\t\t\tthat.pending_buf[that.pending++] = p;\r\n\t\t}\r\n\r\n\t\tfunction put_short(w) {\r\n\t\t\tput_byte(w & 0xff);\r\n\t\t\tput_byte((w >>> 8) & 0xff);\r\n\t\t}\r\n\r\n\t\tfunction putShortMSB(b) {\r\n\t\t\tput_byte((b >> 8) & 0xff);\r\n\t\t\tput_byte((b & 0xff) & 0xff);\r\n\t\t}\r\n\r\n\t\tfunction send_bits(value, length) {\r\n\t\t\tvar val, len = length;\r\n\t\t\tif (bi_valid > Buf_size - len) {\r\n\t\t\t\tval = value;\r\n\t\t\t\t// bi_buf |= (val << bi_valid);\r\n\t\t\t\tbi_buf |= ((val << bi_valid) & 0xffff);\r\n\t\t\t\tput_short(bi_buf);\r\n\t\t\t\tbi_buf = val >>> (Buf_size - bi_valid);\r\n\t\t\t\tbi_valid += len - Buf_size;\r\n\t\t\t} else {\r\n\t\t\t\t// bi_buf |= (value) << bi_valid;\r\n\t\t\t\tbi_buf |= (((value) << bi_valid) & 0xffff);\r\n\t\t\t\tbi_valid += len;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction send_code(c, tree) {\r\n\t\t\tvar c2 = c * 2;\r\n\t\t\tsend_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);\r\n\t\t}\r\n\r\n\t\t// Send a literal or distance tree in compressed form, using the codes in\r\n\t\t// bl_tree.\r\n\t\tfunction send_tree(tree,// the tree to be sent\r\n\t\tmax_code // and its largest code of non zero frequency\r\n\t\t) {\r\n\t\t\tvar n; // iterates over all tree elements\r\n\t\t\tvar prevlen = -1; // last emitted length\r\n\t\t\tvar curlen; // length of current code\r\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\r\n\t\t\tvar count = 0; // repeat count of the current code\r\n\t\t\tvar max_count = 7; // max repeat count\r\n\t\t\tvar min_count = 4; // min repeat count\r\n\r\n\t\t\tif (nextlen === 0) {\r\n\t\t\t\tmax_count = 138;\r\n\t\t\t\tmin_count = 3;\r\n\t\t\t}\r\n\r\n\t\t\tfor (n = 0; n <= max_code; n++) {\r\n\t\t\t\tcurlen = nextlen;\r\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\r\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else if (count < min_count) {\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\r\n\t\t\t\t\t} while (--count !== 0);\r\n\t\t\t\t} else if (curlen !== 0) {\r\n\t\t\t\t\tif (curlen != prevlen) {\r\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\r\n\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsend_code(REP_3_6, bl_tree);\r\n\t\t\t\t\tsend_bits(count - 3, 2);\r\n\t\t\t\t} else if (count <= 10) {\r\n\t\t\t\t\tsend_code(REPZ_3_10, bl_tree);\r\n\t\t\t\t\tsend_bits(count - 3, 3);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsend_code(REPZ_11_138, bl_tree);\r\n\t\t\t\t\tsend_bits(count - 11, 7);\r\n\t\t\t\t}\r\n\t\t\t\tcount = 0;\r\n\t\t\t\tprevlen = curlen;\r\n\t\t\t\tif (nextlen === 0) {\r\n\t\t\t\t\tmax_count = 138;\r\n\t\t\t\t\tmin_count = 3;\r\n\t\t\t\t} else if (curlen == nextlen) {\r\n\t\t\t\t\tmax_count = 6;\r\n\t\t\t\t\tmin_count = 3;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmax_count = 7;\r\n\t\t\t\t\tmin_count = 4;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Send the header for a block using dynamic Huffman trees: the counts, the\r\n\t\t// lengths of the bit length codes, the literal tree and the distance tree.\r\n\t\t// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\r\n\t\tfunction send_all_trees(lcodes, dcodes, blcodes) {\r\n\t\t\tvar rank; // index in bl_order\r\n\r\n\t\t\tsend_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\r\n\t\t\tsend_bits(dcodes - 1, 5);\r\n\t\t\tsend_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\r\n\t\t\tfor (rank = 0; rank < blcodes; rank++) {\r\n\t\t\t\tsend_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);\r\n\t\t\t}\r\n\t\t\tsend_tree(dyn_ltree, lcodes - 1); // literal tree\r\n\t\t\tsend_tree(dyn_dtree, dcodes - 1); // distance tree\r\n\t\t}\r\n\r\n\t\t// Flush the bit buffer, keeping at most 7 bits in it.\r\n\t\tfunction bi_flush() {\r\n\t\t\tif (bi_valid == 16) {\r\n\t\t\t\tput_short(bi_buf);\r\n\t\t\t\tbi_buf = 0;\r\n\t\t\t\tbi_valid = 0;\r\n\t\t\t} else if (bi_valid >= 8) {\r\n\t\t\t\tput_byte(bi_buf & 0xff);\r\n\t\t\t\tbi_buf >>>= 8;\r\n\t\t\t\tbi_valid -= 8;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Send one empty static block to give enough lookahead for inflate.\r\n\t\t// This takes 10 bits, of which 7 may remain in the bit buffer.\r\n\t\t// The current inflate code requires 9 bits of lookahead. If the\r\n\t\t// last two codes for the previous block (real code plus EOB) were coded\r\n\t\t// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode\r\n\t\t// the last real code. In this case we send two empty static blocks instead\r\n\t\t// of one. (There are no problems if the previous block is stored or fixed.)\r\n\t\t// To simplify the code, we assume the worst case of last real code encoded\r\n\t\t// on one bit only.\r\n\t\tfunction _tr_align() {\r\n\t\t\tsend_bits(STATIC_TREES << 1, 3);\r\n\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\r\n\r\n\t\t\tbi_flush();\r\n\r\n\t\t\t// Of the 10 bits for the empty block, we have already sent\r\n\t\t\t// (10 - bi_valid) bits. The lookahead for the last real code (before\r\n\t\t\t// the EOB of the previous block) was thus at least one plus the length\r\n\t\t\t// of the EOB plus what we have just sent of the empty static block.\r\n\t\t\tif (1 + last_eob_len + 10 - bi_valid < 9) {\r\n\t\t\t\tsend_bits(STATIC_TREES << 1, 3);\r\n\t\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\r\n\t\t\t\tbi_flush();\r\n\t\t\t}\r\n\t\t\tlast_eob_len = 7;\r\n\t\t}\r\n\r\n\t\t// Save the match info and tally the frequency counts. Return true if\r\n\t\t// the current block must be flushed.\r\n\t\tfunction _tr_tally(dist, // distance of matched string\r\n\t\tlc // match length-MIN_MATCH or unmatched char (if dist==0)\r\n\t\t) {\r\n\t\t\tvar out_length, in_length, dcode;\r\n\t\t\tthat.pending_buf[d_buf + last_lit * 2] = (dist >>> 8) & 0xff;\r\n\t\t\tthat.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;\r\n\r\n\t\t\tthat.pending_buf[l_buf + last_lit] = lc & 0xff;\r\n\t\t\tlast_lit++;\r\n\r\n\t\t\tif (dist === 0) {\r\n\t\t\t\t// lc is the unmatched char\r\n\t\t\t\tdyn_ltree[lc * 2]++;\r\n\t\t\t} else {\r\n\t\t\t\tmatches++;\r\n\t\t\t\t// Here, lc is the match length - MIN_MATCH\r\n\t\t\t\tdist--; // dist = match distance - 1\r\n\t\t\t\tdyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;\r\n\t\t\t\tdyn_dtree[Tree.d_code(dist) * 2]++;\r\n\t\t\t}\r\n\r\n\t\t\tif ((last_lit & 0x1fff) === 0 && level > 2) {\r\n\t\t\t\t// Compute an upper bound for the compressed length\r\n\t\t\t\tout_length = last_lit * 8;\r\n\t\t\t\tin_length = strstart - block_start;\r\n\t\t\t\tfor (dcode = 0; dcode < D_CODES; dcode++) {\r\n\t\t\t\t\tout_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);\r\n\t\t\t\t}\r\n\t\t\t\tout_length >>>= 3;\r\n\t\t\t\tif ((matches < Math.floor(last_lit / 2)) && out_length < Math.floor(in_length / 2))\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn (last_lit == lit_bufsize - 1);\r\n\t\t\t// We avoid equality with lit_bufsize because of wraparound at 64K\r\n\t\t\t// on 16 bit machines and because stored blocks are restricted to\r\n\t\t\t// 64K-1 bytes.\r\n\t\t}\r\n\r\n\t\t// Send the block data compressed using the given Huffman trees\r\n\t\tfunction compress_block(ltree, dtree) {\r\n\t\t\tvar dist; // distance of matched string\r\n\t\t\tvar lc; // match length or unmatched char (if dist === 0)\r\n\t\t\tvar lx = 0; // running index in l_buf\r\n\t\t\tvar code; // the code to send\r\n\t\t\tvar extra; // number of extra bits to send\r\n\r\n\t\t\tif (last_lit !== 0) {\r\n\t\t\t\tdo {\r\n\t\t\t\t\tdist = ((that.pending_buf[d_buf + lx * 2] << 8) & 0xff00) | (that.pending_buf[d_buf + lx * 2 + 1] & 0xff);\r\n\t\t\t\t\tlc = (that.pending_buf[l_buf + lx]) & 0xff;\r\n\t\t\t\t\tlx++;\r\n\r\n\t\t\t\t\tif (dist === 0) {\r\n\t\t\t\t\t\tsend_code(lc, ltree); // send a literal byte\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Here, lc is the match length - MIN_MATCH\r\n\t\t\t\t\t\tcode = Tree._length_code[lc];\r\n\r\n\t\t\t\t\t\tsend_code(code + LITERALS + 1, ltree); // send the length\r\n\t\t\t\t\t\t// code\r\n\t\t\t\t\t\textra = Tree.extra_lbits[code];\r\n\t\t\t\t\t\tif (extra !== 0) {\r\n\t\t\t\t\t\t\tlc -= Tree.base_length[code];\r\n\t\t\t\t\t\t\tsend_bits(lc, extra); // send the extra length bits\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdist--; // dist is now the match distance - 1\r\n\t\t\t\t\t\tcode = Tree.d_code(dist);\r\n\r\n\t\t\t\t\t\tsend_code(code, dtree); // send the distance code\r\n\t\t\t\t\t\textra = Tree.extra_dbits[code];\r\n\t\t\t\t\t\tif (extra !== 0) {\r\n\t\t\t\t\t\t\tdist -= Tree.base_dist[code];\r\n\t\t\t\t\t\t\tsend_bits(dist, extra); // send the extra distance bits\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} // literal or match pair ?\r\n\r\n\t\t\t\t\t// Check that the overlay between pending_buf and d_buf+l_buf is\r\n\t\t\t\t\t// ok:\r\n\t\t\t\t} while (lx < last_lit);\r\n\t\t\t}\r\n\r\n\t\t\tsend_code(END_BLOCK, ltree);\r\n\t\t\tlast_eob_len = ltree[END_BLOCK * 2 + 1];\r\n\t\t}\r\n\r\n\t\t// Flush the bit buffer and align the output on a byte boundary\r\n\t\tfunction bi_windup() {\r\n\t\t\tif (bi_valid > 8) {\r\n\t\t\t\tput_short(bi_buf);\r\n\t\t\t} else if (bi_valid > 0) {\r\n\t\t\t\tput_byte(bi_buf & 0xff);\r\n\t\t\t}\r\n\t\t\tbi_buf = 0;\r\n\t\t\tbi_valid = 0;\r\n\t\t}\r\n\r\n\t\t// Copy a stored block, storing first the length and its\r\n\t\t// one's complement if requested.\r\n\t\tfunction copy_block(buf, // the input data\r\n\t\tlen, // its length\r\n\t\theader // true if block header must be written\r\n\t\t) {\r\n\t\t\tbi_windup(); // align on byte boundary\r\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\r\n\r\n\t\t\tif (header) {\r\n\t\t\t\tput_short(len);\r\n\t\t\t\tput_short(~len);\r\n\t\t\t}\r\n\r\n\t\t\tthat.pending_buf.set(window.subarray(buf, buf + len), that.pending);\r\n\t\t\tthat.pending += len;\r\n\t\t}\r\n\r\n\t\t// Send a stored block\r\n\t\tfunction _tr_stored_block(buf, // input block\r\n\t\tstored_len, // length of input block\r\n\t\teof // true if this is the last block for a file\r\n\t\t) {\r\n\t\t\tsend_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type\r\n\t\t\tcopy_block(buf, stored_len, true); // with header\r\n\t\t}\r\n\r\n\t\t// Determine the best encoding for the current block: dynamic trees, static\r\n\t\t// trees or store, and output the encoded block to the zip file.\r\n\t\tfunction _tr_flush_block(buf, // input block, or NULL if too old\r\n\t\tstored_len, // length of input block\r\n\t\teof // true if this is the last block for a file\r\n\t\t) {\r\n\t\t\tvar opt_lenb, static_lenb;// opt_len and static_len in bytes\r\n\t\t\tvar max_blindex = 0; // index of last bit length code of non zero freq\r\n\r\n\t\t\t// Build the Huffman trees unless a stored block is forced\r\n\t\t\tif (level > 0) {\r\n\t\t\t\t// Construct the literal and distance trees\r\n\t\t\t\tl_desc.build_tree(that);\r\n\r\n\t\t\t\td_desc.build_tree(that);\r\n\r\n\t\t\t\t// At this point, opt_len and static_len are the total bit lengths\r\n\t\t\t\t// of\r\n\t\t\t\t// the compressed block data, excluding the tree representations.\r\n\r\n\t\t\t\t// Build the bit length tree for the above two trees, and get the\r\n\t\t\t\t// index\r\n\t\t\t\t// in bl_order of the last bit length code to send.\r\n\t\t\t\tmax_blindex = build_bl_tree();\r\n\r\n\t\t\t\t// Determine the best encoding. Compute first the block length in\r\n\t\t\t\t// bytes\r\n\t\t\t\topt_lenb = (that.opt_len + 3 + 7) >>> 3;\r\n\t\t\t\tstatic_lenb = (that.static_len + 3 + 7) >>> 3;\r\n\r\n\t\t\t\tif (static_lenb <= opt_lenb)\r\n\t\t\t\t\topt_lenb = static_lenb;\r\n\t\t\t} else {\r\n\t\t\t\topt_lenb = static_lenb = stored_len + 5; // force a stored block\r\n\t\t\t}\r\n\r\n\t\t\tif ((stored_len + 4 <= opt_lenb) && buf != -1) {\r\n\t\t\t\t// 4: two words for the lengths\r\n\t\t\t\t// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\r\n\t\t\t\t// Otherwise we can't have processed more than WSIZE input bytes\r\n\t\t\t\t// since\r\n\t\t\t\t// the last block flush, because compression would have been\r\n\t\t\t\t// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\r\n\t\t\t\t// transform a block into a stored block.\r\n\t\t\t\t_tr_stored_block(buf, stored_len, eof);\r\n\t\t\t} else if (static_lenb == opt_lenb) {\r\n\t\t\t\tsend_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);\r\n\t\t\t\tcompress_block(StaticTree.static_ltree, StaticTree.static_dtree);\r\n\t\t\t} else {\r\n\t\t\t\tsend_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);\r\n\t\t\t\tsend_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\r\n\t\t\t\tcompress_block(dyn_ltree, dyn_dtree);\r\n\t\t\t}\r\n\r\n\t\t\t// The above check is made mod 2^32, for files larger than 512 MB\r\n\t\t\t// and uLong implemented on 32 bits.\r\n\r\n\t\t\tinit_block();\r\n\r\n\t\t\tif (eof) {\r\n\t\t\t\tbi_windup();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction flush_block_only(eof) {\r\n\t\t\t_tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);\r\n\t\t\tblock_start = strstart;\r\n\t\t\tstrm.flush_pending();\r\n\t\t}\r\n\r\n\t\t// Fill the window when the lookahead becomes insufficient.\r\n\t\t// Updates strstart and lookahead.\r\n\t\t//\r\n\t\t// IN assertion: lookahead < MIN_LOOKAHEAD\r\n\t\t// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\r\n\t\t// At least one byte has been read, or avail_in === 0; reads are\r\n\t\t// performed for at least two bytes (required for the zip translate_eol\r\n\t\t// option -- not supported here).\r\n\t\tfunction fill_window() {\r\n\t\t\tvar n, m;\r\n\t\t\tvar p;\r\n\t\t\tvar more; // Amount of free space at the end of the window.\r\n\r\n\t\t\tdo {\r\n\t\t\t\tmore = (window_size - lookahead - strstart);\r\n\r\n\t\t\t\t// Deal with !@#$% 64K limit:\r\n\t\t\t\tif (more === 0 && strstart === 0 && lookahead === 0) {\r\n\t\t\t\t\tmore = w_size;\r\n\t\t\t\t} else if (more == -1) {\r\n\t\t\t\t\t// Very unlikely, but possible on 16 bit machine if strstart ==\r\n\t\t\t\t\t// 0\r\n\t\t\t\t\t// and lookahead == 1 (input done one byte at time)\r\n\t\t\t\t\tmore--;\r\n\r\n\t\t\t\t\t// If the window is almost full and there is insufficient\r\n\t\t\t\t\t// lookahead,\r\n\t\t\t\t\t// move the upper half to the lower one to make room in the\r\n\t\t\t\t\t// upper half.\r\n\t\t\t\t} else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {\r\n\t\t\t\t\twindow.set(window.subarray(w_size, w_size + w_size), 0);\r\n\r\n\t\t\t\t\tmatch_start -= w_size;\r\n\t\t\t\t\tstrstart -= w_size; // we now have strstart >= MAX_DIST\r\n\t\t\t\t\tblock_start -= w_size;\r\n\r\n\t\t\t\t\t// Slide the hash table (could be avoided with 32 bit values\r\n\t\t\t\t\t// at the expense of memory usage). We slide even when level ==\r\n\t\t\t\t\t// 0\r\n\t\t\t\t\t// to keep the hash table consistent if we switch back to level\r\n\t\t\t\t\t// > 0\r\n\t\t\t\t\t// later. (Using level 0 permanently is not an optimal usage of\r\n\t\t\t\t\t// zlib, so we don't care about this pathological case.)\r\n\r\n\t\t\t\t\tn = hash_size;\r\n\t\t\t\t\tp = n;\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tm = (head[--p] & 0xffff);\r\n\t\t\t\t\t\thead[p] = (m >= w_size ? m - w_size : 0);\r\n\t\t\t\t\t} while (--n !== 0);\r\n\r\n\t\t\t\t\tn = w_size;\r\n\t\t\t\t\tp = n;\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tm = (prev[--p] & 0xffff);\r\n\t\t\t\t\t\tprev[p] = (m >= w_size ? m - w_size : 0);\r\n\t\t\t\t\t\t// If n is not on any hash chain, prev[n] is garbage but\r\n\t\t\t\t\t\t// its value will never be used.\r\n\t\t\t\t\t} while (--n !== 0);\r\n\t\t\t\t\tmore += w_size;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (strm.avail_in === 0)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t// If there was no sliding:\r\n\t\t\t\t// strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\r\n\t\t\t\t// more == window_size - lookahead - strstart\r\n\t\t\t\t// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\r\n\t\t\t\t// => more >= window_size - 2*WSIZE + 2\r\n\t\t\t\t// In the BIG_MEM or MMAP case (not yet supported),\r\n\t\t\t\t// window_size == input_size + MIN_LOOKAHEAD &&\r\n\t\t\t\t// strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\r\n\t\t\t\t// Otherwise, window_size == 2*WSIZE so more >= 2.\r\n\t\t\t\t// If there was sliding, more >= WSIZE. So in all cases, more >= 2.\r\n\r\n\t\t\t\tn = strm.read_buf(window, strstart + lookahead, more);\r\n\t\t\t\tlookahead += n;\r\n\r\n\t\t\t\t// Initialize the hash value now that we have some input:\r\n\t\t\t\tif (lookahead >= MIN_MATCH) {\r\n\t\t\t\t\tins_h = window[strstart] & 0xff;\r\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\r\n\t\t\t\t}\r\n\t\t\t\t// If the whole input has less than MIN_MATCH bytes, ins_h is\r\n\t\t\t\t// garbage,\r\n\t\t\t\t// but this is not important since only literal bytes will be\r\n\t\t\t\t// emitted.\r\n\t\t\t} while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);\r\n\t\t}\r\n\r\n\t\t// Copy without compression as much as possible from the input stream,\r\n\t\t// return\r\n\t\t// the current block state.\r\n\t\t// This function does not insert new strings in the dictionary since\r\n\t\t// uncompressible data is probably not useful. This function is used\r\n\t\t// only for the level=0 compression option.\r\n\t\t// NOTE: this function should be optimized to avoid extra copying from\r\n\t\t// window to pending_buf.\r\n\t\tfunction deflate_stored(flush) {\r\n\t\t\t// Stored blocks are limited to 0xffff bytes, pending_buf is limited\r\n\t\t\t// to pending_buf_size, and each stored block has a 5 byte header:\r\n\r\n\t\t\tvar max_block_size = 0xffff;\r\n\t\t\tvar max_start;\r\n\r\n\t\t\tif (max_block_size > pending_buf_size - 5) {\r\n\t\t\t\tmax_block_size = pending_buf_size - 5;\r\n\t\t\t}\r\n\r\n\t\t\t// Copy as much as possible from input to output:\r\n\t\t\twhile (true) {\r\n\t\t\t\t// Fill the window as much as possible:\r\n\t\t\t\tif (lookahead <= 1) {\r\n\t\t\t\t\tfill_window();\r\n\t\t\t\t\tif (lookahead === 0 && flush == Z_NO_FLUSH)\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t\tif (lookahead === 0)\r\n\t\t\t\t\t\tbreak; // flush the current block\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstrstart += lookahead;\r\n\t\t\t\tlookahead = 0;\r\n\r\n\t\t\t\t// Emit a stored block if pending_buf will be full:\r\n\t\t\t\tmax_start = block_start + max_block_size;\r\n\t\t\t\tif (strstart === 0 || strstart >= max_start) {\r\n\t\t\t\t\t// strstart === 0 is possible when wraparound on 16-bit machine\r\n\t\t\t\t\tlookahead = (strstart - max_start);\r\n\t\t\t\t\tstrstart = max_start;\r\n\r\n\t\t\t\t\tflush_block_only(false);\r\n\t\t\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\t\t\treturn NeedMore;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Flush if we may have to slide, otherwise block_start may become\r\n\t\t\t\t// negative and the data will be gone:\r\n\t\t\t\tif (strstart - block_start >= w_size - MIN_LOOKAHEAD) {\r\n\t\t\t\t\tflush_block_only(false);\r\n\t\t\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tflush_block_only(flush == Z_FINISH);\r\n\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\treturn (flush == Z_FINISH) ? FinishStarted : NeedMore;\r\n\r\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\r\n\t\t}\r\n\r\n\t\tfunction longest_match(cur_match) {\r\n\t\t\tvar chain_length = max_chain_length; // max hash chain length\r\n\t\t\tvar scan = strstart; // current string\r\n\t\t\tvar match; // matched string\r\n\t\t\tvar len; // length of current match\r\n\t\t\tvar best_len = prev_length; // best match length so far\r\n\t\t\tvar limit = strstart > (w_size - MIN_LOOKAHEAD) ? strstart - (w_size - MIN_LOOKAHEAD) : 0;\r\n\t\t\tvar _nice_match = nice_match;\r\n\r\n\t\t\t// Stop when cur_match becomes <= limit. To simplify the code,\r\n\t\t\t// we prevent matches with the string of window index 0.\r\n\r\n\t\t\tvar wmask = w_mask;\r\n\r\n\t\t\tvar strend = strstart + MAX_MATCH;\r\n\t\t\tvar scan_end1 = window[scan + best_len - 1];\r\n\t\t\tvar scan_end = window[scan + best_len];\r\n\r\n\t\t\t// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of\r\n\t\t\t// 16.\r\n\t\t\t// It is easy to get rid of this optimization if necessary.\r\n\r\n\t\t\t// Do not waste too much time if we already have a good match:\r\n\t\t\tif (prev_length >= good_match) {\r\n\t\t\t\tchain_length >>= 2;\r\n\t\t\t}\r\n\r\n\t\t\t// Do not look for matches beyond the end of the input. This is\r\n\t\t\t// necessary\r\n\t\t\t// to make deflate deterministic.\r\n\t\t\tif (_nice_match > lookahead)\r\n\t\t\t\t_nice_match = lookahead;\r\n\r\n\t\t\tdo {\r\n\t\t\t\tmatch = cur_match;\r\n\r\n\t\t\t\t// Skip to next match if the match length cannot increase\r\n\t\t\t\t// or if the match length is less than 2:\r\n\t\t\t\tif (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan]\r\n\t\t\t\t\t\t|| window[++match] != window[scan + 1])\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t// The check at best_len-1 can be removed because it will be made\r\n\t\t\t\t// again later. (This heuristic is not always a win.)\r\n\t\t\t\t// It is not necessary to compare scan[2] and match[2] since they\r\n\t\t\t\t// are always equal when the other bytes match, given that\r\n\t\t\t\t// the hash keys are equal and that HASH_BITS >= 8.\r\n\t\t\t\tscan += 2;\r\n\t\t\t\tmatch++;\r\n\r\n\t\t\t\t// We check for insufficient lookahead only every 8th comparison;\r\n\t\t\t\t// the 256th check will be made at strstart+258.\r\n\t\t\t\tdo {\r\n\t\t\t\t} while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\r\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\r\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);\r\n\r\n\t\t\t\tlen = MAX_MATCH - (strend - scan);\r\n\t\t\t\tscan = strend - MAX_MATCH;\r\n\r\n\t\t\t\tif (len > best_len) {\r\n\t\t\t\t\tmatch_start = cur_match;\r\n\t\t\t\t\tbest_len = len;\r\n\t\t\t\t\tif (len >= _nice_match)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tscan_end1 = window[scan + best_len - 1];\r\n\t\t\t\t\tscan_end = window[scan + best_len];\r\n\t\t\t\t}\r\n\r\n\t\t\t} while ((cur_match = (prev[cur_match & wmask] & 0xffff)) > limit && --chain_length !== 0);\r\n\r\n\t\t\tif (best_len <= lookahead)\r\n\t\t\t\treturn best_len;\r\n\t\t\treturn lookahead;\r\n\t\t}\r\n\r\n\t\t// Compress as much as possible from the input stream, return the current\r\n\t\t// block state.\r\n\t\t// This function does not perform lazy evaluation of matches and inserts\r\n\t\t// new strings in the dictionary only for unmatched strings or for short\r\n\t\t// matches. It is used only for the fast compression options.\r\n\t\tfunction deflate_fast(flush) {\r\n\t\t\t// short hash_head = 0; // head of the hash chain\r\n\t\t\tvar hash_head = 0; // head of the hash chain\r\n\t\t\tvar bflush; // set if current block must be flushed\r\n\r\n\t\t\twhile (true) {\r\n\t\t\t\t// Make sure that we always have enough lookahead, except\r\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\r\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\r\n\t\t\t\t// string following the next match.\r\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\r\n\t\t\t\t\tfill_window();\r\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (lookahead === 0)\r\n\t\t\t\t\t\tbreak; // flush the current block\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\r\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\r\n\t\t\t\tif (lookahead >= MIN_MATCH) {\r\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\r\n\r\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\r\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\r\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\r\n\t\t\t\t\thead[ins_h] = strstart;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\r\n\t\t\t\t// At this point we have always match_length < MIN_MATCH\r\n\r\n\t\t\t\tif (hash_head !== 0 && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\r\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\r\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\r\n\t\t\t\t\t// of the string with itself at the start of the input file).\r\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\r\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// longest_match() sets match_start\r\n\t\t\t\t}\r\n\t\t\t\tif (match_length >= MIN_MATCH) {\r\n\t\t\t\t\t// check_match(strstart, match_start, match_length);\r\n\r\n\t\t\t\t\tbflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);\r\n\r\n\t\t\t\t\tlookahead -= match_length;\r\n\r\n\t\t\t\t\t// Insert new strings in the hash table only if the match length\r\n\t\t\t\t\t// is not too large. This saves time but degrades compression.\r\n\t\t\t\t\tif (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {\r\n\t\t\t\t\t\tmatch_length--; // string at strstart already in hash table\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tstrstart++;\r\n\r\n\t\t\t\t\t\t\tins_h = ((ins_h << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\r\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\r\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\r\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\r\n\t\t\t\t\t\t\thead[ins_h] = strstart;\r\n\r\n\t\t\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\r\n\t\t\t\t\t\t\t// always MIN_MATCH bytes ahead.\r\n\t\t\t\t\t\t} while (--match_length !== 0);\r\n\t\t\t\t\t\tstrstart++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstrstart += match_length;\r\n\t\t\t\t\t\tmatch_length = 0;\r\n\t\t\t\t\t\tins_h = window[strstart] & 0xff;\r\n\r\n\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\r\n\t\t\t\t\t\t// If lookahead < MIN_MATCH, ins_h is garbage, but it does\r\n\t\t\t\t\t\t// not\r\n\t\t\t\t\t\t// matter since it will be recomputed at next deflate call.\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// No match, output a literal byte\r\n\r\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart] & 0xff);\r\n\t\t\t\t\tlookahead--;\r\n\t\t\t\t\tstrstart++;\r\n\t\t\t\t}\r\n\t\t\t\tif (bflush) {\r\n\r\n\t\t\t\t\tflush_block_only(false);\r\n\t\t\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tflush_block_only(flush == Z_FINISH);\r\n\t\t\tif (strm.avail_out === 0) {\r\n\t\t\t\tif (flush == Z_FINISH)\r\n\t\t\t\t\treturn FinishStarted;\r\n\t\t\t\telse\r\n\t\t\t\t\treturn NeedMore;\r\n\t\t\t}\r\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\r\n\t\t}\r\n\r\n\t\t// Same as above, but achieves better compression. We use a lazy\r\n\t\t// evaluation for matches: a match is finally adopted only if there is\r\n\t\t// no better match at the next window position.\r\n\t\tfunction deflate_slow(flush) {\r\n\t\t\t// short hash_head = 0; // head of hash chain\r\n\t\t\tvar hash_head = 0; // head of hash chain\r\n\t\t\tvar bflush; // set if current block must be flushed\r\n\t\t\tvar max_insert;\r\n\r\n\t\t\t// Process the input block.\r\n\t\t\twhile (true) {\r\n\t\t\t\t// Make sure that we always have enough lookahead, except\r\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\r\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\r\n\t\t\t\t// string following the next match.\r\n\r\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\r\n\t\t\t\t\tfill_window();\r\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (lookahead === 0)\r\n\t\t\t\t\t\tbreak; // flush the current block\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\r\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\r\n\r\n\t\t\t\tif (lookahead >= MIN_MATCH) {\r\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\r\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\r\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\r\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\r\n\t\t\t\t\thead[ins_h] = strstart;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\r\n\t\t\t\tprev_length = match_length;\r\n\t\t\t\tprev_match = match_start;\r\n\t\t\t\tmatch_length = MIN_MATCH - 1;\r\n\r\n\t\t\t\tif (hash_head !== 0 && prev_length < max_lazy_match && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\r\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\r\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\r\n\t\t\t\t\t// of the string with itself at the start of the input file).\r\n\r\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\r\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// longest_match() sets match_start\r\n\r\n\t\t\t\t\tif (match_length <= 5 && (strategy == Z_FILTERED || (match_length == MIN_MATCH && strstart - match_start > 4096))) {\r\n\r\n\t\t\t\t\t\t// If prev_match is also MIN_MATCH, match_start is garbage\r\n\t\t\t\t\t\t// but we will ignore the current match anyway.\r\n\t\t\t\t\t\tmatch_length = MIN_MATCH - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If there was a match at the previous step and the current\r\n\t\t\t\t// match is not better, output the previous match:\r\n\t\t\t\tif (prev_length >= MIN_MATCH && match_length <= prev_length) {\r\n\t\t\t\t\tmax_insert = strstart + lookahead - MIN_MATCH;\r\n\t\t\t\t\t// Do not insert strings in hash table beyond this.\r\n\r\n\t\t\t\t\t// check_match(strstart-1, prev_match, prev_length);\r\n\r\n\t\t\t\t\tbflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);\r\n\r\n\t\t\t\t\t// Insert in hash table all strings up to the end of the match.\r\n\t\t\t\t\t// strstart-1 and strstart are already inserted. If there is not\r\n\t\t\t\t\t// enough lookahead, the last two strings are not inserted in\r\n\t\t\t\t\t// the hash table.\r\n\t\t\t\t\tlookahead -= prev_length - 1;\r\n\t\t\t\t\tprev_length -= 2;\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tif (++strstart <= max_insert) {\r\n\t\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\r\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\r\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\r\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\r\n\t\t\t\t\t\t\thead[ins_h] = strstart;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} while (--prev_length !== 0);\r\n\t\t\t\t\tmatch_available = 0;\r\n\t\t\t\t\tmatch_length = MIN_MATCH - 1;\r\n\t\t\t\t\tstrstart++;\r\n\r\n\t\t\t\t\tif (bflush) {\r\n\t\t\t\t\t\tflush_block_only(false);\r\n\t\t\t\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (match_available !== 0) {\r\n\r\n\t\t\t\t\t// If there was no match at the previous position, output a\r\n\t\t\t\t\t// single literal. If there was a match but the current match\r\n\t\t\t\t\t// is longer, truncate the previous match to a single literal.\r\n\r\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\r\n\r\n\t\t\t\t\tif (bflush) {\r\n\t\t\t\t\t\tflush_block_only(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstrstart++;\r\n\t\t\t\t\tlookahead--;\r\n\t\t\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// There is no previous match to compare with, wait for\r\n\t\t\t\t\t// the next step to decide.\r\n\r\n\t\t\t\t\tmatch_available = 1;\r\n\t\t\t\t\tstrstart++;\r\n\t\t\t\t\tlookahead--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (match_available !== 0) {\r\n\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\r\n\t\t\t\tmatch_available = 0;\r\n\t\t\t}\r\n\t\t\tflush_block_only(flush == Z_FINISH);\r\n\r\n\t\t\tif (strm.avail_out === 0) {\r\n\t\t\t\tif (flush == Z_FINISH)\r\n\t\t\t\t\treturn FinishStarted;\r\n\t\t\t\telse\r\n\t\t\t\t\treturn NeedMore;\r\n\t\t\t}\r\n\r\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\r\n\t\t}\r\n\r\n\t\tfunction deflateReset(strm) {\r\n\t\t\tstrm.total_in = strm.total_out = 0;\r\n\t\t\tstrm.msg = null; //\r\n\t\t\t\r\n\t\t\tthat.pending = 0;\r\n\t\t\tthat.pending_out = 0;\r\n\r\n\t\t\tstatus = BUSY_STATE;\r\n\r\n\t\t\tlast_flush = Z_NO_FLUSH;\r\n\r\n\t\t\ttr_init();\r\n\t\t\tlm_init();\r\n\t\t\treturn Z_OK;\r\n\t\t}\r\n\r\n\t\tthat.deflateInit = function(strm, _level, bits, _method, memLevel, _strategy) {\r\n\t\t\tif (!_method)\r\n\t\t\t\t_method = Z_DEFLATED;\r\n\t\t\tif (!memLevel)\r\n\t\t\t\tmemLevel = DEF_MEM_LEVEL;\r\n\t\t\tif (!_strategy)\r\n\t\t\t\t_strategy = Z_DEFAULT_STRATEGY;\r\n\r\n\t\t\t// byte[] my_version=ZLIB_VERSION;\r\n\r\n\t\t\t//\r\n\t\t\t// if (!version || version[0] != my_version[0]\r\n\t\t\t// || stream_size != sizeof(z_stream)) {\r\n\t\t\t// return Z_VERSION_ERROR;\r\n\t\t\t// }\r\n\r\n\t\t\tstrm.msg = null;\r\n\r\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION)\r\n\t\t\t\t_level = 6;\r\n\r\n\t\t\tif (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0\r\n\t\t\t\t\t|| _strategy > Z_HUFFMAN_ONLY) {\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\tstrm.dstate = that;\r\n\r\n\t\t\tw_bits = bits;\r\n\t\t\tw_size = 1 << w_bits;\r\n\t\t\tw_mask = w_size - 1;\r\n\r\n\t\t\thash_bits = memLevel + 7;\r\n\t\t\thash_size = 1 << hash_bits;\r\n\t\t\thash_mask = hash_size - 1;\r\n\t\t\thash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);\r\n\r\n\t\t\twindow = new Uint8Array(w_size * 2);\r\n\t\t\tprev = [];\r\n\t\t\thead = [];\r\n\r\n\t\t\tlit_bufsize = 1 << (memLevel + 6); // 16K elements by default\r\n\r\n\t\t\t// We overlay pending_buf and d_buf+l_buf. This works since the average\r\n\t\t\t// output size for (length,distance) codes is <= 24 bits.\r\n\t\t\tthat.pending_buf = new Uint8Array(lit_bufsize * 4);\r\n\t\t\tpending_buf_size = lit_bufsize * 4;\r\n\r\n\t\t\td_buf = Math.floor(lit_bufsize / 2);\r\n\t\t\tl_buf = (1 + 2) * lit_bufsize;\r\n\r\n\t\t\tlevel = _level;\r\n\r\n\t\t\tstrategy = _strategy;\r\n\t\t\tmethod = _method & 0xff;\r\n\r\n\t\t\treturn deflateReset(strm);\r\n\t\t};\r\n\r\n\t\tthat.deflateEnd = function() {\r\n\t\t\tif (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\t\t\t// Deallocate in reverse order of allocations:\r\n\t\t\tthat.pending_buf = null;\r\n\t\t\thead = null;\r\n\t\t\tprev = null;\r\n\t\t\twindow = null;\r\n\t\t\t// free\r\n\t\t\tthat.dstate = null;\r\n\t\t\treturn status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;\r\n\t\t};\r\n\r\n\t\tthat.deflateParams = function(strm, _level, _strategy) {\r\n\t\t\tvar err = Z_OK;\r\n\r\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION) {\r\n\t\t\t\t_level = 6;\r\n\t\t\t}\r\n\t\t\tif (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\tif (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {\r\n\t\t\t\t// Flush the last buffer:\r\n\t\t\t\terr = strm.deflate(Z_PARTIAL_FLUSH);\r\n\t\t\t}\r\n\r\n\t\t\tif (level != _level) {\r\n\t\t\t\tlevel = _level;\r\n\t\t\t\tmax_lazy_match = config_table[level].max_lazy;\r\n\t\t\t\tgood_match = config_table[level].good_length;\r\n\t\t\t\tnice_match = config_table[level].nice_length;\r\n\t\t\t\tmax_chain_length = config_table[level].max_chain;\r\n\t\t\t}\r\n\t\t\tstrategy = _strategy;\r\n\t\t\treturn err;\r\n\t\t};\r\n\r\n\t\tthat.deflateSetDictionary = function(strm, dictionary, dictLength) {\r\n\t\t\tvar length = dictLength;\r\n\t\t\tvar n, index = 0;\r\n\r\n\t\t\tif (!dictionary || status != INIT_STATE)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\r\n\t\t\tif (length < MIN_MATCH)\r\n\t\t\t\treturn Z_OK;\r\n\t\t\tif (length > w_size - MIN_LOOKAHEAD) {\r\n\t\t\t\tlength = w_size - MIN_LOOKAHEAD;\r\n\t\t\t\tindex = dictLength - length; // use the tail of the dictionary\r\n\t\t\t}\r\n\t\t\twindow.set(dictionary.subarray(index, index + length), 0);\r\n\r\n\t\t\tstrstart = length;\r\n\t\t\tblock_start = length;\r\n\r\n\t\t\t// Insert all strings in the hash table (except for the last two bytes).\r\n\t\t\t// s->lookahead stays null, so s->ins_h will be recomputed at the next\r\n\t\t\t// call of fill_window.\r\n\r\n\t\t\tins_h = window[0] & 0xff;\r\n\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[1] & 0xff)) & hash_mask;\r\n\r\n\t\t\tfor (n = 0; n <= length - MIN_MATCH; n++) {\r\n\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(n) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\r\n\t\t\t\tprev[n & w_mask] = head[ins_h];\r\n\t\t\t\thead[ins_h] = n;\r\n\t\t\t}\r\n\t\t\treturn Z_OK;\r\n\t\t};\r\n\r\n\t\tthat.deflate = function(_strm, flush) {\r\n\t\t\tvar i, header, level_flags, old_flush, bstate;\r\n\r\n\t\t\tif (flush > Z_FINISH || flush < 0) {\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\tif (!_strm.next_out || (!_strm.next_in && _strm.avail_in !== 0) || (status == FINISH_STATE && flush != Z_FINISH)) {\r\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_STREAM_ERROR)];\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\t\t\tif (_strm.avail_out === 0) {\r\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\r\n\t\t\t\treturn Z_BUF_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\tstrm = _strm; // just in case\r\n\t\t\told_flush = last_flush;\r\n\t\t\tlast_flush = flush;\r\n\r\n\t\t\t// Write the zlib header\r\n\t\t\tif (status == INIT_STATE) {\r\n\t\t\t\theader = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;\r\n\t\t\t\tlevel_flags = ((level - 1) & 0xff) >> 1;\r\n\r\n\t\t\t\tif (level_flags > 3)\r\n\t\t\t\t\tlevel_flags = 3;\r\n\t\t\t\theader |= (level_flags << 6);\r\n\t\t\t\tif (strstart !== 0)\r\n\t\t\t\t\theader |= PRESET_DICT;\r\n\t\t\t\theader += 31 - (header % 31);\r\n\r\n\t\t\t\tstatus = BUSY_STATE;\r\n\t\t\t\tputShortMSB(header);\r\n\t\t\t}\r\n\r\n\t\t\t// Flush as much pending output as possible\r\n\t\t\tif (that.pending !== 0) {\r\n\t\t\t\tstrm.flush_pending();\r\n\t\t\t\tif (strm.avail_out === 0) {\r\n\t\t\t\t\t// console.log(\" avail_out==0\");\r\n\t\t\t\t\t// Since avail_out is 0, deflate will be called again with\r\n\t\t\t\t\t// more output space, but possibly with both pending and\r\n\t\t\t\t\t// avail_in equal to zero. There won't be anything to do,\r\n\t\t\t\t\t// but this is not an error situation so make sure we\r\n\t\t\t\t\t// return OK instead of BUF_ERROR at next call of deflate:\r\n\t\t\t\t\tlast_flush = -1;\r\n\t\t\t\t\treturn Z_OK;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Make sure there is something to do and avoid duplicate\r\n\t\t\t\t// consecutive\r\n\t\t\t\t// flushes. For repeated and useless calls with Z_FINISH, we keep\r\n\t\t\t\t// returning Z_STREAM_END instead of Z_BUFF_ERROR.\r\n\t\t\t} else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {\r\n\t\t\t\tstrm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\r\n\t\t\t\treturn Z_BUF_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\t// User must not provide more input after the first FINISH:\r\n\t\t\tif (status == FINISH_STATE && strm.avail_in !== 0) {\r\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\r\n\t\t\t\treturn Z_BUF_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\t// Start a new block or continue the current one.\r\n\t\t\tif (strm.avail_in !== 0 || lookahead !== 0 || (flush != Z_NO_FLUSH && status != FINISH_STATE)) {\r\n\t\t\t\tbstate = -1;\r\n\t\t\t\tswitch (config_table[level].func) {\r\n\t\t\t\tcase STORED:\r\n\t\t\t\t\tbstate = deflate_stored(flush);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase FAST:\r\n\t\t\t\t\tbstate = deflate_fast(flush);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SLOW:\r\n\t\t\t\t\tbstate = deflate_slow(flush);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bstate == FinishStarted || bstate == FinishDone) {\r\n\t\t\t\t\tstatus = FINISH_STATE;\r\n\t\t\t\t}\r\n\t\t\t\tif (bstate == NeedMore || bstate == FinishStarted) {\r\n\t\t\t\t\tif (strm.avail_out === 0) {\r\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR next call, see above\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn Z_OK;\r\n\t\t\t\t\t// If flush != Z_NO_FLUSH && avail_out === 0, the next call\r\n\t\t\t\t\t// of deflate should use the same flush parameter to make sure\r\n\t\t\t\t\t// that the flush is complete. So we don't have to output an\r\n\t\t\t\t\t// empty block here, this will be done at next call. This also\r\n\t\t\t\t\t// ensures that for a very small output buffer, we emit at most\r\n\t\t\t\t\t// one empty block.\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bstate == BlockDone) {\r\n\t\t\t\t\tif (flush == Z_PARTIAL_FLUSH) {\r\n\t\t\t\t\t\t_tr_align();\r\n\t\t\t\t\t} else { // FULL_FLUSH or SYNC_FLUSH\r\n\t\t\t\t\t\t_tr_stored_block(0, 0, false);\r\n\t\t\t\t\t\t// For a full flush, this empty block will be recognized\r\n\t\t\t\t\t\t// as a special marker by inflate_sync().\r\n\t\t\t\t\t\tif (flush == Z_FULL_FLUSH) {\r\n\t\t\t\t\t\t\t// state.head[s.hash_size-1]=0;\r\n\t\t\t\t\t\t\tfor (i = 0; i < hash_size/*-1*/; i++)\r\n\t\t\t\t\t\t\t\t// forget history\r\n\t\t\t\t\t\t\t\thead[i] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstrm.flush_pending();\r\n\t\t\t\t\tif (strm.avail_out === 0) {\r\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR at next call, see above\r\n\t\t\t\t\t\treturn Z_OK;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (flush != Z_FINISH)\r\n\t\t\t\treturn Z_OK;\r\n\t\t\treturn Z_STREAM_END;\r\n\t\t};\r\n\t}\r\n\r\n\t// ZStream\r\n\r\n\tfunction ZStream() {\r\n\t\tvar that = this;\r\n\t\tthat.next_in_index = 0;\r\n\t\tthat.next_out_index = 0;\r\n\t\t// that.next_in; // next input byte\r\n\t\tthat.avail_in = 0; // number of bytes available at next_in\r\n\t\tthat.total_in = 0; // total nb of input bytes read so far\r\n\t\t// that.next_out; // next output byte should be put there\r\n\t\tthat.avail_out = 0; // remaining free space at next_out\r\n\t\tthat.total_out = 0; // total nb of bytes output so far\r\n\t\t// that.msg;\r\n\t\t// that.dstate;\r\n\t}\r\n\r\n\tZStream.prototype = {\r\n\t\tdeflateInit : function(level, bits) {\r\n\t\t\tvar that = this;\r\n\t\t\tthat.dstate = new Deflate();\r\n\t\t\tif (!bits)\r\n\t\t\t\tbits = MAX_BITS;\r\n\t\t\treturn that.dstate.deflateInit(that, level, bits);\r\n\t\t},\r\n\r\n\t\tdeflate : function(flush) {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.dstate) {\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\t\t\treturn that.dstate.deflate(that, flush);\r\n\t\t},\r\n\r\n\t\tdeflateEnd : function() {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.dstate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\tvar ret = that.dstate.deflateEnd();\r\n\t\t\tthat.dstate = null;\r\n\t\t\treturn ret;\r\n\t\t},\r\n\r\n\t\tdeflateParams : function(level, strategy) {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.dstate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\treturn that.dstate.deflateParams(that, level, strategy);\r\n\t\t},\r\n\r\n\t\tdeflateSetDictionary : function(dictionary, dictLength) {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.dstate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\treturn that.dstate.deflateSetDictionary(that, dictionary, dictLength);\r\n\t\t},\r\n\r\n\t\t// Read a new buffer from the current input stream, update the\r\n\t\t// total number of bytes read. All deflate() input goes through\r\n\t\t// this function so some applications may wish to modify it to avoid\r\n\t\t// allocating a large strm->next_in buffer and copying from it.\r\n\t\t// (See also flush_pending()).\r\n\t\tread_buf : function(buf, start, size) {\r\n\t\t\tvar that = this;\r\n\t\t\tvar len = that.avail_in;\r\n\t\t\tif (len > size)\r\n\t\t\t\tlen = size;\r\n\t\t\tif (len === 0)\r\n\t\t\t\treturn 0;\r\n\t\t\tthat.avail_in -= len;\r\n\t\t\tbuf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);\r\n\t\t\tthat.next_in_index += len;\r\n\t\t\tthat.total_in += len;\r\n\t\t\treturn len;\r\n\t\t},\r\n\r\n\t\t// Flush as much pending output as possible. All deflate() output goes\r\n\t\t// through this function so some applications may wish to modify it\r\n\t\t// to avoid allocating a large strm->next_out buffer and copying into it.\r\n\t\t// (See also read_buf()).\r\n\t\tflush_pending : function() {\r\n\t\t\tvar that = this;\r\n\t\t\tvar len = that.dstate.pending;\r\n\r\n\t\t\tif (len > that.avail_out)\r\n\t\t\t\tlen = that.avail_out;\r\n\t\t\tif (len === 0)\r\n\t\t\t\treturn;\r\n\r\n\t\t\t// if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index\r\n\t\t\t// || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\r\n\t\t\t// len)) {\r\n\t\t\t// console.log(that.dstate.pending_buf.length + \", \" + that.dstate.pending_out + \", \" + that.next_out.length + \", \" +\r\n\t\t\t// that.next_out_index + \", \" + len);\r\n\t\t\t// console.log(\"avail_out=\" + that.avail_out);\r\n\t\t\t// }\r\n\r\n\t\t\tthat.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\r\n\r\n\t\t\tthat.next_out_index += len;\r\n\t\t\tthat.dstate.pending_out += len;\r\n\t\t\tthat.total_out += len;\r\n\t\t\tthat.avail_out -= len;\r\n\t\t\tthat.dstate.pending -= len;\r\n\t\t\tif (that.dstate.pending === 0) {\r\n\t\t\t\tthat.dstate.pending_out = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Deflater\r\n\r\n\tfunction Deflater(level) {\r\n\t\tvar that = this;\r\n\t\tvar z = new ZStream();\r\n\t\tvar bufsize = 512;\r\n\t\tvar flush = Z_NO_FLUSH;\r\n\t\tvar buf = new Uint8Array(bufsize);\r\n\r\n\t\tif (typeof level == \"undefined\")\r\n\t\t\tlevel = Z_DEFAULT_COMPRESSION;\r\n\t\tz.deflateInit(level);\r\n\t\tz.next_out = buf;\r\n\r\n\t\tthat.append = function(data, onprogress) {\r\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\r\n\t\t\tif (!data.length)\r\n\t\t\t\treturn;\r\n\t\t\tz.next_in_index = 0;\r\n\t\t\tz.next_in = data;\r\n\t\t\tz.avail_in = data.length;\r\n\t\t\tdo {\r\n\t\t\t\tz.next_out_index = 0;\r\n\t\t\t\tz.avail_out = bufsize;\r\n\t\t\t\terr = z.deflate(flush);\r\n\t\t\t\tif (err != Z_OK)\r\n\t\t\t\t\tthrow \"deflating: \" + z.msg;\r\n\t\t\t\tif (z.next_out_index)\r\n\t\t\t\t\tif (z.next_out_index == bufsize)\r\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\r\n\t\t\t\tbufferSize += z.next_out_index;\r\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\r\n\t\t\t\t\tonprogress(z.next_in_index);\r\n\t\t\t\t\tlastIndex = z.next_in_index;\r\n\t\t\t\t}\r\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\r\n\t\t\tarray = new Uint8Array(bufferSize);\r\n\t\t\tbuffers.forEach(function(chunk) {\r\n\t\t\t\tarray.set(chunk, bufferIndex);\r\n\t\t\t\tbufferIndex += chunk.length;\r\n\t\t\t});\r\n\t\t\treturn array;\r\n\t\t};\r\n\t\tthat.flush = function() {\r\n\t\t\tvar err, buffers = [], bufferIndex = 0, bufferSize = 0, array;\r\n\t\t\tdo {\r\n\t\t\t\tz.next_out_index = 0;\r\n\t\t\t\tz.avail_out = bufsize;\r\n\t\t\t\terr = z.deflate(Z_FINISH);\r\n\t\t\t\tif (err != Z_STREAM_END && err != Z_OK)\r\n\t\t\t\t\tthrow \"deflating: \" + z.msg;\r\n\t\t\t\tif (bufsize - z.avail_out > 0)\r\n\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\r\n\t\t\t\tbufferSize += z.next_out_index;\r\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\r\n\t\t\tz.deflateEnd();\r\n\t\t\tarray = new Uint8Array(bufferSize);\r\n\t\t\tbuffers.forEach(function(chunk) {\r\n\t\t\t\tarray.set(chunk, bufferIndex);\r\n\t\t\t\tbufferIndex += chunk.length;\r\n\t\t\t});\r\n\t\t\treturn array;\r\n\t\t};\r\n\t}\r\n\r\n\tvar deflater;\r\n\r\n\tif (obj.zip)\r\n\t\tobj.zip.Deflater = Deflater;\r\n\telse {\r\n\t\tdeflater = new Deflater();\r\n\t\tobj.addEventListener(\"message\", function(event) {\r\n\t\t\tvar message = event.data;\r\n\t\t\tif (message.init) {\r\n\t\t\t\tdeflater = new Deflater(message.level);\r\n\t\t\t\tobj.postMessage({\r\n\t\t\t\t\toninit : true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (message.append)\r\n\t\t\t\tobj.postMessage({\r\n\t\t\t\t\tonappend : true,\r\n\t\t\t\t\tdata : deflater.append(message.data, function(current) {\r\n\t\t\t\t\t\tobj.postMessage({\r\n\t\t\t\t\t\t\tprogress : true,\r\n\t\t\t\t\t\t\tcurrent : current\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\tif (message.flush)\r\n\t\t\t\tobj.postMessage({\r\n\t\t\t\t\tonflush : true,\r\n\t\t\t\t\tdata : deflater.flush()\r\n\t\t\t\t});\r\n\t\t}, false);\r\n\t}\r\n\r\n})(self);\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// c2107e8fe359a1184895.worker.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"build/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c2107e8fe359a1184895","/*\r\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\r\n\r\n Redistribution and use in source and binary forms, with or without\r\n modification, are permitted provided that the following conditions are met:\r\n\r\n 1. Redistributions of source code must retain the above copyright notice,\r\n this list of conditions and the following disclaimer.\r\n\r\n 2. Redistributions in binary form must reproduce the above copyright \r\n notice, this list of conditions and the following disclaimer in \r\n the documentation and/or other materials provided with the distribution.\r\n\r\n 3. The names of the authors may not be used to endorse or promote products\r\n derived from this software without specific prior written permission.\r\n\r\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\r\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\r\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\r\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\r\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\r\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/*\r\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\r\n * JZlib is based on zlib-1.1.3, so all credit should go authors\r\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\r\n * and contributors of zlib.\r\n */\r\n\r\n(function(obj) {\r\n\r\n\t// Global\r\n\r\n\tvar MAX_BITS = 15;\r\n\tvar D_CODES = 30;\r\n\tvar BL_CODES = 19;\r\n\r\n\tvar LENGTH_CODES = 29;\r\n\tvar LITERALS = 256;\r\n\tvar L_CODES = (LITERALS + 1 + LENGTH_CODES);\r\n\tvar HEAP_SIZE = (2 * L_CODES + 1);\r\n\r\n\tvar END_BLOCK = 256;\r\n\r\n\t// Bit length codes must not exceed MAX_BL_BITS bits\r\n\tvar MAX_BL_BITS = 7;\r\n\r\n\t// repeat previous bit length 3-6 times (2 bits of repeat count)\r\n\tvar REP_3_6 = 16;\r\n\r\n\t// repeat a zero length 3-10 times (3 bits of repeat count)\r\n\tvar REPZ_3_10 = 17;\r\n\r\n\t// repeat a zero length 11-138 times (7 bits of repeat count)\r\n\tvar REPZ_11_138 = 18;\r\n\r\n\t// The lengths of the bit length codes are sent in order of decreasing\r\n\t// probability, to avoid transmitting the lengths for unused bit\r\n\t// length codes.\r\n\r\n\tvar Buf_size = 8 * 2;\r\n\r\n\t// JZlib version : \"1.0.2\"\r\n\tvar Z_DEFAULT_COMPRESSION = -1;\r\n\r\n\t// compression strategy\r\n\tvar Z_FILTERED = 1;\r\n\tvar Z_HUFFMAN_ONLY = 2;\r\n\tvar Z_DEFAULT_STRATEGY = 0;\r\n\r\n\tvar Z_NO_FLUSH = 0;\r\n\tvar Z_PARTIAL_FLUSH = 1;\r\n\tvar Z_FULL_FLUSH = 3;\r\n\tvar Z_FINISH = 4;\r\n\r\n\tvar Z_OK = 0;\r\n\tvar Z_STREAM_END = 1;\r\n\tvar Z_NEED_DICT = 2;\r\n\tvar Z_STREAM_ERROR = -2;\r\n\tvar Z_DATA_ERROR = -3;\r\n\tvar Z_BUF_ERROR = -5;\r\n\r\n\t// Tree\r\n\r\n\t// see definition of array dist_code below\r\n\tvar _dist_code = [ 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\r\n\t\t\t10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\r\n\t\t\t12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\r\n\t\t\t13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\r\n\t\t\t14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\r\n\t\t\t14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\r\n\t\t\t15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19,\r\n\t\t\t20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\r\n\t\t\t24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\r\n\t\t\t26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,\r\n\t\t\t27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\r\n\t\t\t28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29,\r\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\r\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 ];\r\n\r\n\tfunction Tree() {\r\n\t\tvar that = this;\r\n\r\n\t\t// dyn_tree; // the dynamic tree\r\n\t\t// max_code; // largest code with non zero frequency\r\n\t\t// stat_desc; // the corresponding static tree\r\n\r\n\t\t// Compute the optimal bit lengths for a tree and update the total bit\r\n\t\t// length\r\n\t\t// for the current block.\r\n\t\t// IN assertion: the fields freq and dad are set, heap[heap_max] and\r\n\t\t// above are the tree nodes sorted by increasing frequency.\r\n\t\t// OUT assertions: the field len is set to the optimal bit length, the\r\n\t\t// array bl_count contains the frequencies for each bit length.\r\n\t\t// The length opt_len is updated; static_len is also updated if stree is\r\n\t\t// not null.\r\n\t\tfunction gen_bitlen(s) {\r\n\t\t\tvar tree = that.dyn_tree;\r\n\t\t\tvar stree = that.stat_desc.static_tree;\r\n\t\t\tvar extra = that.stat_desc.extra_bits;\r\n\t\t\tvar base = that.stat_desc.extra_base;\r\n\t\t\tvar max_length = that.stat_desc.max_length;\r\n\t\t\tvar h; // heap index\r\n\t\t\tvar n, m; // iterate over the tree elements\r\n\t\t\tvar bits; // bit length\r\n\t\t\tvar xbits; // extra bits\r\n\t\t\tvar f; // frequency\r\n\t\t\tvar overflow = 0; // number of elements with bit length too large\r\n\r\n\t\t\tfor (bits = 0; bits <= MAX_BITS; bits++)\r\n\t\t\t\ts.bl_count[bits] = 0;\r\n\r\n\t\t\t// In a first pass, compute the optimal bit lengths (which may\r\n\t\t\t// overflow in the case of the bit length tree).\r\n\t\t\ttree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap\r\n\r\n\t\t\tfor (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\r\n\t\t\t\tn = s.heap[h];\r\n\t\t\t\tbits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\r\n\t\t\t\tif (bits > max_length) {\r\n\t\t\t\t\tbits = max_length;\r\n\t\t\t\t\toverflow++;\r\n\t\t\t\t}\r\n\t\t\t\ttree[n * 2 + 1] = bits;\r\n\t\t\t\t// We overwrite tree[n*2+1] which is no longer needed\r\n\r\n\t\t\t\tif (n > that.max_code)\r\n\t\t\t\t\tcontinue; // not a leaf node\r\n\r\n\t\t\t\ts.bl_count[bits]++;\r\n\t\t\t\txbits = 0;\r\n\t\t\t\tif (n >= base)\r\n\t\t\t\t\txbits = extra[n - base];\r\n\t\t\t\tf = tree[n * 2];\r\n\t\t\t\ts.opt_len += f * (bits + xbits);\r\n\t\t\t\tif (stree)\r\n\t\t\t\t\ts.static_len += f * (stree[n * 2 + 1] + xbits);\r\n\t\t\t}\r\n\t\t\tif (overflow === 0)\r\n\t\t\t\treturn;\r\n\r\n\t\t\t// This happens for example on obj2 and pic of the Calgary corpus\r\n\t\t\t// Find the first bit length which could increase:\r\n\t\t\tdo {\r\n\t\t\t\tbits = max_length - 1;\r\n\t\t\t\twhile (s.bl_count[bits] === 0)\r\n\t\t\t\t\tbits--;\r\n\t\t\t\ts.bl_count[bits]--; // move one leaf down the tree\r\n\t\t\t\ts.bl_count[bits + 1] += 2; // move one overflow item as its brother\r\n\t\t\t\ts.bl_count[max_length]--;\r\n\t\t\t\t// The brother of the overflow item also moves one step up,\r\n\t\t\t\t// but this does not affect bl_count[max_length]\r\n\t\t\t\toverflow -= 2;\r\n\t\t\t} while (overflow > 0);\r\n\r\n\t\t\tfor (bits = max_length; bits !== 0; bits--) {\r\n\t\t\t\tn = s.bl_count[bits];\r\n\t\t\t\twhile (n !== 0) {\r\n\t\t\t\t\tm = s.heap[--h];\r\n\t\t\t\t\tif (m > that.max_code)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tif (tree[m * 2 + 1] != bits) {\r\n\t\t\t\t\t\ts.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\r\n\t\t\t\t\t\ttree[m * 2 + 1] = bits;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tn--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Reverse the first len bits of a code, using straightforward code (a\r\n\t\t// faster\r\n\t\t// method would use a table)\r\n\t\t// IN assertion: 1 <= len <= 15\r\n\t\tfunction bi_reverse(code, // the value to invert\r\n\t\tlen // its bit length\r\n\t\t) {\r\n\t\t\tvar res = 0;\r\n\t\t\tdo {\r\n\t\t\t\tres |= code & 1;\r\n\t\t\t\tcode >>>= 1;\r\n\t\t\t\tres <<= 1;\r\n\t\t\t} while (--len > 0);\r\n\t\t\treturn res >>> 1;\r\n\t\t}\r\n\r\n\t\t// Generate the codes for a given tree and bit counts (which need not be\r\n\t\t// optimal).\r\n\t\t// IN assertion: the array bl_count contains the bit length statistics for\r\n\t\t// the given tree and the field len is set for all tree elements.\r\n\t\t// OUT assertion: the field code is set for all tree elements of non\r\n\t\t// zero code length.\r\n\t\tfunction gen_codes(tree, // the tree to decorate\r\n\t\tmax_code, // largest code with non zero frequency\r\n\t\tbl_count // number of codes at each bit length\r\n\t\t) {\r\n\t\t\tvar next_code = []; // next code value for each\r\n\t\t\t// bit length\r\n\t\t\tvar code = 0; // running code value\r\n\t\t\tvar bits; // bit index\r\n\t\t\tvar n; // code index\r\n\t\t\tvar len;\r\n\r\n\t\t\t// The distribution counts are first used to generate the code values\r\n\t\t\t// without bit reversal.\r\n\t\t\tfor (bits = 1; bits <= MAX_BITS; bits++) {\r\n\t\t\t\tnext_code[bits] = code = ((code + bl_count[bits - 1]) << 1);\r\n\t\t\t}\r\n\r\n\t\t\t// Check that the bit counts in bl_count are consistent. The last code\r\n\t\t\t// must be all ones.\r\n\t\t\t// Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\r\n\t\t\t// \"inconsistent bit counts\");\r\n\t\t\t// Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\r\n\r\n\t\t\tfor (n = 0; n <= max_code; n++) {\r\n\t\t\t\tlen = tree[n * 2 + 1];\r\n\t\t\t\tif (len === 0)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t// Now reverse the bits\r\n\t\t\t\ttree[n * 2] = bi_reverse(next_code[len]++, len);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Construct one Huffman tree and assigns the code bit strings and lengths.\r\n\t\t// Update the total bit length for the current block.\r\n\t\t// IN assertion: the field freq is set for all tree elements.\r\n\t\t// OUT assertions: the fields len and code are set to the optimal bit length\r\n\t\t// and corresponding code. The length opt_len is updated; static_len is\r\n\t\t// also updated if stree is not null. The field max_code is set.\r\n\t\tthat.build_tree = function(s) {\r\n\t\t\tvar tree = that.dyn_tree;\r\n\t\t\tvar stree = that.stat_desc.static_tree;\r\n\t\t\tvar elems = that.stat_desc.elems;\r\n\t\t\tvar n, m; // iterate over heap elements\r\n\t\t\tvar max_code = -1; // largest code with non zero frequency\r\n\t\t\tvar node; // new node being created\r\n\r\n\t\t\t// Construct the initial heap, with least frequent element in\r\n\t\t\t// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\r\n\t\t\t// heap[0] is not used.\r\n\t\t\ts.heap_len = 0;\r\n\t\t\ts.heap_max = HEAP_SIZE;\r\n\r\n\t\t\tfor (n = 0; n < elems; n++) {\r\n\t\t\t\tif (tree[n * 2] !== 0) {\r\n\t\t\t\t\ts.heap[++s.heap_len] = max_code = n;\r\n\t\t\t\t\ts.depth[n] = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttree[n * 2 + 1] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// The pkzip format requires that at least one distance code exists,\r\n\t\t\t// and that at least one bit should be sent even if there is only one\r\n\t\t\t// possible code. So to avoid special checks later on we force at least\r\n\t\t\t// two codes of non zero frequency.\r\n\t\t\twhile (s.heap_len < 2) {\r\n\t\t\t\tnode = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\r\n\t\t\t\ttree[node * 2] = 1;\r\n\t\t\t\ts.depth[node] = 0;\r\n\t\t\t\ts.opt_len--;\r\n\t\t\t\tif (stree)\r\n\t\t\t\t\ts.static_len -= stree[node * 2 + 1];\r\n\t\t\t\t// node is 0 or 1 so it does not have extra bits\r\n\t\t\t}\r\n\t\t\tthat.max_code = max_code;\r\n\r\n\t\t\t// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\r\n\t\t\t// establish sub-heaps of increasing lengths:\r\n\r\n\t\t\tfor (n = Math.floor(s.heap_len / 2); n >= 1; n--)\r\n\t\t\t\ts.pqdownheap(tree, n);\r\n\r\n\t\t\t// Construct the Huffman tree by repeatedly combining the least two\r\n\t\t\t// frequent nodes.\r\n\r\n\t\t\tnode = elems; // next internal node of the tree\r\n\t\t\tdo {\r\n\t\t\t\t// n = node of least frequency\r\n\t\t\t\tn = s.heap[1];\r\n\t\t\t\ts.heap[1] = s.heap[s.heap_len--];\r\n\t\t\t\ts.pqdownheap(tree, 1);\r\n\t\t\t\tm = s.heap[1]; // m = node of next least frequency\r\n\r\n\t\t\t\ts.heap[--s.heap_max] = n; // keep the nodes sorted by frequency\r\n\t\t\t\ts.heap[--s.heap_max] = m;\r\n\r\n\t\t\t\t// Create a new node father of n and m\r\n\t\t\t\ttree[node * 2] = (tree[n * 2] + tree[m * 2]);\r\n\t\t\t\ts.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;\r\n\t\t\t\ttree[n * 2 + 1] = tree[m * 2 + 1] = node;\r\n\r\n\t\t\t\t// and insert the new node in the heap\r\n\t\t\t\ts.heap[1] = node++;\r\n\t\t\t\ts.pqdownheap(tree, 1);\r\n\t\t\t} while (s.heap_len >= 2);\r\n\r\n\t\t\ts.heap[--s.heap_max] = s.heap[1];\r\n\r\n\t\t\t// At this point, the fields freq and dad are set. We can now\r\n\t\t\t// generate the bit lengths.\r\n\r\n\t\t\tgen_bitlen(s);\r\n\r\n\t\t\t// The field len is now set, we can generate the bit codes\r\n\t\t\tgen_codes(tree, that.max_code, s.bl_count);\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tTree._length_code = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16,\r\n\t\t\t16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20,\r\n\t\t\t20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\r\n\t\t\t22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\r\n\t\t\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\r\n\t\t\t25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\r\n\t\t\t26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28 ];\r\n\r\n\tTree.base_length = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0 ];\r\n\r\n\tTree.base_dist = [ 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384,\r\n\t\t\t24576 ];\r\n\r\n\t// Mapping from a distance to a distance code. dist is the distance - 1 and\r\n\t// must not have side effects. _dist_code[256] and _dist_code[257] are never\r\n\t// used.\r\n\tTree.d_code = function(dist) {\r\n\t\treturn ((dist) < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >>> 7)]);\r\n\t};\r\n\r\n\t// extra bits for each length code\r\n\tTree.extra_lbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 ];\r\n\r\n\t// extra bits for each distance code\r\n\tTree.extra_dbits = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\r\n\r\n\t// extra bits for each bit length code\r\n\tTree.extra_blbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7 ];\r\n\r\n\tTree.bl_order = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\r\n\r\n\t// StaticTree\r\n\r\n\tfunction StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {\r\n\t\tvar that = this;\r\n\t\tthat.static_tree = static_tree;\r\n\t\tthat.extra_bits = extra_bits;\r\n\t\tthat.extra_base = extra_base;\r\n\t\tthat.elems = elems;\r\n\t\tthat.max_length = max_length;\r\n\t}\r\n\r\n\tStaticTree.static_ltree = [ 12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8,\r\n\t\t\t130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42,\r\n\t\t\t8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8,\r\n\t\t\t22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8,\r\n\t\t\t222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113,\r\n\t\t\t8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8,\r\n\t\t\t69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8,\r\n\t\t\t173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9,\r\n\t\t\t51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9,\r\n\t\t\t427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379,\r\n\t\t\t9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23,\r\n\t\t\t9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9,\r\n\t\t\t399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9,\r\n\t\t\t223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7,\r\n\t\t\t40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8,\r\n\t\t\t99, 8, 227, 8 ];\r\n\r\n\tStaticTree.static_dtree = [ 0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5,\r\n\t\t\t25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5 ];\r\n\r\n\tStaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\r\n\r\n\tStaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);\r\n\r\n\tStaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);\r\n\r\n\t// Deflate\r\n\r\n\tvar MAX_MEM_LEVEL = 9;\r\n\tvar DEF_MEM_LEVEL = 8;\r\n\r\n\tfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\r\n\t\tvar that = this;\r\n\t\tthat.good_length = good_length;\r\n\t\tthat.max_lazy = max_lazy;\r\n\t\tthat.nice_length = nice_length;\r\n\t\tthat.max_chain = max_chain;\r\n\t\tthat.func = func;\r\n\t}\r\n\r\n\tvar STORED = 0;\r\n\tvar FAST = 1;\r\n\tvar SLOW = 2;\r\n\tvar config_table = [ new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST),\r\n\t\t\tnew Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW),\r\n\t\t\tnew Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW) ];\r\n\r\n\tvar z_errmsg = [ \"need dictionary\", // Z_NEED_DICT\r\n\t// 2\r\n\t\"stream end\", // Z_STREAM_END 1\r\n\t\"\", // Z_OK 0\r\n\t\"\", // Z_ERRNO (-1)\r\n\t\"stream error\", // Z_STREAM_ERROR (-2)\r\n\t\"data error\", // Z_DATA_ERROR (-3)\r\n\t\"\", // Z_MEM_ERROR (-4)\r\n\t\"buffer error\", // Z_BUF_ERROR (-5)\r\n\t\"\",// Z_VERSION_ERROR (-6)\r\n\t\"\" ];\r\n\r\n\t// block not completed, need more input or more output\r\n\tvar NeedMore = 0;\r\n\r\n\t// block flush performed\r\n\tvar BlockDone = 1;\r\n\r\n\t// finish started, need only more output at next deflate\r\n\tvar FinishStarted = 2;\r\n\r\n\t// finish done, accept no more input or output\r\n\tvar FinishDone = 3;\r\n\r\n\t// preset dictionary flag in zlib header\r\n\tvar PRESET_DICT = 0x20;\r\n\r\n\tvar INIT_STATE = 42;\r\n\tvar BUSY_STATE = 113;\r\n\tvar FINISH_STATE = 666;\r\n\r\n\t// The deflate compression method\r\n\tvar Z_DEFLATED = 8;\r\n\r\n\tvar STORED_BLOCK = 0;\r\n\tvar STATIC_TREES = 1;\r\n\tvar DYN_TREES = 2;\r\n\r\n\tvar MIN_MATCH = 3;\r\n\tvar MAX_MATCH = 258;\r\n\tvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\r\n\r\n\tfunction smaller(tree, n, m, depth) {\r\n\t\tvar tn2 = tree[n * 2];\r\n\t\tvar tm2 = tree[m * 2];\r\n\t\treturn (tn2 < tm2 || (tn2 == tm2 && depth[n] <= depth[m]));\r\n\t}\r\n\r\n\tfunction Deflate() {\r\n\r\n\t\tvar that = this;\r\n\t\tvar strm; // pointer back to this zlib stream\r\n\t\tvar status; // as the name implies\r\n\t\t// pending_buf; // output still pending\r\n\t\tvar pending_buf_size; // size of pending_buf\r\n\t\t// pending_out; // next pending byte to output to the stream\r\n\t\t// pending; // nb of bytes in the pending buffer\r\n\t\tvar method; // STORED (for zip only) or DEFLATED\r\n\t\tvar last_flush; // value of flush param for previous deflate call\r\n\r\n\t\tvar w_size; // LZ77 window size (32K by default)\r\n\t\tvar w_bits; // log2(w_size) (8..16)\r\n\t\tvar w_mask; // w_size - 1\r\n\r\n\t\tvar window;\r\n\t\t// Sliding window. Input bytes are read into the second half of the window,\r\n\t\t// and move to the first half later to keep a dictionary of at least wSize\r\n\t\t// bytes. With this organization, matches are limited to a distance of\r\n\t\t// wSize-MAX_MATCH bytes, but this ensures that IO is always\r\n\t\t// performed with a length multiple of the block size. Also, it limits\r\n\t\t// the window size to 64K, which is quite useful on MSDOS.\r\n\t\t// To do: use the user input buffer as sliding window.\r\n\r\n\t\tvar window_size;\r\n\t\t// Actual size of window: 2*wSize, except when the user input buffer\r\n\t\t// is directly used as sliding window.\r\n\r\n\t\tvar prev;\r\n\t\t// Link to older string with same hash index. To limit the size of this\r\n\t\t// array to 64K, this link is maintained only for the last 32K strings.\r\n\t\t// An index in this array is thus a window index modulo 32K.\r\n\r\n\t\tvar head; // Heads of the hash chains or NIL.\r\n\r\n\t\tvar ins_h; // hash index of string to be inserted\r\n\t\tvar hash_size; // number of elements in hash table\r\n\t\tvar hash_bits; // log2(hash_size)\r\n\t\tvar hash_mask; // hash_size-1\r\n\r\n\t\t// Number of bits by which ins_h must be shifted at each input\r\n\t\t// step. It must be such that after MIN_MATCH steps, the oldest\r\n\t\t// byte no longer takes part in the hash key, that is:\r\n\t\t// hash_shift * MIN_MATCH >= hash_bits\r\n\t\tvar hash_shift;\r\n\r\n\t\t// Window position at the beginning of the current output block. Gets\r\n\t\t// negative when the window is moved backwards.\r\n\r\n\t\tvar block_start;\r\n\r\n\t\tvar match_length; // length of best match\r\n\t\tvar prev_match; // previous match\r\n\t\tvar match_available; // set if previous match exists\r\n\t\tvar strstart; // start of string to insert\r\n\t\tvar match_start; // start of matching string\r\n\t\tvar lookahead; // number of valid bytes ahead in window\r\n\r\n\t\t// Length of the best match at previous step. Matches not greater than this\r\n\t\t// are discarded. This is used in the lazy match evaluation.\r\n\t\tvar prev_length;\r\n\r\n\t\t// To speed up deflation, hash chains are never searched beyond this\r\n\t\t// length. A higher limit improves compression ratio but degrades the speed.\r\n\t\tvar max_chain_length;\r\n\r\n\t\t// Attempt to find a better match only when the current match is strictly\r\n\t\t// smaller than this value. This mechanism is used only for compression\r\n\t\t// levels >= 4.\r\n\t\tvar max_lazy_match;\r\n\r\n\t\t// Insert new strings in the hash table only if the match length is not\r\n\t\t// greater than this length. This saves time but degrades compression.\r\n\t\t// max_insert_length is used only for compression levels <= 3.\r\n\r\n\t\tvar level; // compression level (1..9)\r\n\t\tvar strategy; // favor or force Huffman coding\r\n\r\n\t\t// Use a faster search when the previous match is longer than this\r\n\t\tvar good_match;\r\n\r\n\t\t// Stop searching when current match exceeds this\r\n\t\tvar nice_match;\r\n\r\n\t\tvar dyn_ltree; // literal and length tree\r\n\t\tvar dyn_dtree; // distance tree\r\n\t\tvar bl_tree; // Huffman tree for bit lengths\r\n\r\n\t\tvar l_desc = new Tree(); // desc for literal tree\r\n\t\tvar d_desc = new Tree(); // desc for distance tree\r\n\t\tvar bl_desc = new Tree(); // desc for bit length tree\r\n\r\n\t\t// that.heap_len; // number of elements in the heap\r\n\t\t// that.heap_max; // element of largest frequency\r\n\t\t// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\r\n\t\t// The same heap array is used to build all trees.\r\n\r\n\t\t// Depth of each subtree used as tie breaker for trees of equal frequency\r\n\t\tthat.depth = [];\r\n\r\n\t\tvar l_buf; // index for literals or lengths */\r\n\r\n\t\t// Size of match buffer for literals/lengths. There are 4 reasons for\r\n\t\t// limiting lit_bufsize to 64K:\r\n\t\t// - frequencies can be kept in 16 bit counters\r\n\t\t// - if compression is not successful for the first block, all input\r\n\t\t// data is still in the window so we can still emit a stored block even\r\n\t\t// when input comes from standard input. (This can also be done for\r\n\t\t// all blocks if lit_bufsize is not greater than 32K.)\r\n\t\t// - if compression is not successful for a file smaller than 64K, we can\r\n\t\t// even emit a stored file instead of a stored block (saving 5 bytes).\r\n\t\t// This is applicable only for zip (not gzip or zlib).\r\n\t\t// - creating new Huffman trees less frequently may not provide fast\r\n\t\t// adaptation to changes in the input data statistics. (Take for\r\n\t\t// example a binary file with poorly compressible code followed by\r\n\t\t// a highly compressible string table.) Smaller buffer sizes give\r\n\t\t// fast adaptation but have of course the overhead of transmitting\r\n\t\t// trees more frequently.\r\n\t\t// - I can't count above 4\r\n\t\tvar lit_bufsize;\r\n\r\n\t\tvar last_lit; // running index in l_buf\r\n\r\n\t\t// Buffer for distances. To simplify the code, d_buf and l_buf have\r\n\t\t// the same number of elements. To use different lengths, an extra flag\r\n\t\t// array would be necessary.\r\n\r\n\t\tvar d_buf; // index of pendig_buf\r\n\r\n\t\t// that.opt_len; // bit length of current block with optimal trees\r\n\t\t// that.static_len; // bit length of current block with static trees\r\n\t\tvar matches; // number of string matches in current block\r\n\t\tvar last_eob_len; // bit length of EOB code for last block\r\n\r\n\t\t// Output buffer. bits are inserted starting at the bottom (least\r\n\t\t// significant bits).\r\n\t\tvar bi_buf;\r\n\r\n\t\t// Number of valid bits in bi_buf. All bits above the last valid bit\r\n\t\t// are always zero.\r\n\t\tvar bi_valid;\r\n\r\n\t\t// number of codes at each bit length for an optimal tree\r\n\t\tthat.bl_count = [];\r\n\r\n\t\t// heap used to build the Huffman trees\r\n\t\tthat.heap = [];\r\n\r\n\t\tdyn_ltree = [];\r\n\t\tdyn_dtree = [];\r\n\t\tbl_tree = [];\r\n\r\n\t\tfunction lm_init() {\r\n\t\t\tvar i;\r\n\t\t\twindow_size = 2 * w_size;\r\n\r\n\t\t\thead[hash_size - 1] = 0;\r\n\t\t\tfor (i = 0; i < hash_size - 1; i++) {\r\n\t\t\t\thead[i] = 0;\r\n\t\t\t}\r\n\r\n\t\t\t// Set the default configuration parameters:\r\n\t\t\tmax_lazy_match = config_table[level].max_lazy;\r\n\t\t\tgood_match = config_table[level].good_length;\r\n\t\t\tnice_match = config_table[level].nice_length;\r\n\t\t\tmax_chain_length = config_table[level].max_chain;\r\n\r\n\t\t\tstrstart = 0;\r\n\t\t\tblock_start = 0;\r\n\t\t\tlookahead = 0;\r\n\t\t\tmatch_length = prev_length = MIN_MATCH - 1;\r\n\t\t\tmatch_available = 0;\r\n\t\t\tins_h = 0;\r\n\t\t}\r\n\r\n\t\tfunction init_block() {\r\n\t\t\tvar i;\r\n\t\t\t// Initialize the trees.\r\n\t\t\tfor (i = 0; i < L_CODES; i++)\r\n\t\t\t\tdyn_ltree[i * 2] = 0;\r\n\t\t\tfor (i = 0; i < D_CODES; i++)\r\n\t\t\t\tdyn_dtree[i * 2] = 0;\r\n\t\t\tfor (i = 0; i < BL_CODES; i++)\r\n\t\t\t\tbl_tree[i * 2] = 0;\r\n\r\n\t\t\tdyn_ltree[END_BLOCK * 2] = 1;\r\n\t\t\tthat.opt_len = that.static_len = 0;\r\n\t\t\tlast_lit = matches = 0;\r\n\t\t}\r\n\r\n\t\t// Initialize the tree data structures for a new zlib stream.\r\n\t\tfunction tr_init() {\r\n\r\n\t\t\tl_desc.dyn_tree = dyn_ltree;\r\n\t\t\tl_desc.stat_desc = StaticTree.static_l_desc;\r\n\r\n\t\t\td_desc.dyn_tree = dyn_dtree;\r\n\t\t\td_desc.stat_desc = StaticTree.static_d_desc;\r\n\r\n\t\t\tbl_desc.dyn_tree = bl_tree;\r\n\t\t\tbl_desc.stat_desc = StaticTree.static_bl_desc;\r\n\r\n\t\t\tbi_buf = 0;\r\n\t\t\tbi_valid = 0;\r\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\r\n\r\n\t\t\t// Initialize the first block of the first file:\r\n\t\t\tinit_block();\r\n\t\t}\r\n\r\n\t\t// Restore the heap property by moving down the tree starting at node k,\r\n\t\t// exchanging a node with the smallest of its two sons if necessary,\r\n\t\t// stopping\r\n\t\t// when the heap property is re-established (each father smaller than its\r\n\t\t// two sons).\r\n\t\tthat.pqdownheap = function(tree, // the tree to restore\r\n\t\tk // node to move down\r\n\t\t) {\r\n\t\t\tvar heap = that.heap;\r\n\t\t\tvar v = heap[k];\r\n\t\t\tvar j = k << 1; // left son of k\r\n\t\t\twhile (j <= that.heap_len) {\r\n\t\t\t\t// Set j to the smallest of the two sons:\r\n\t\t\t\tif (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t\t// Exit if v is smaller than both sons\r\n\t\t\t\tif (smaller(tree, v, heap[j], that.depth))\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t// Exchange v with the smallest son\r\n\t\t\t\theap[k] = heap[j];\r\n\t\t\t\tk = j;\r\n\t\t\t\t// And continue down the tree, setting j to the left son of k\r\n\t\t\t\tj <<= 1;\r\n\t\t\t}\r\n\t\t\theap[k] = v;\r\n\t\t};\r\n\r\n\t\t// Scan a literal or distance tree to determine the frequencies of the codes\r\n\t\t// in the bit length tree.\r\n\t\tfunction scan_tree(tree,// the tree to be scanned\r\n\t\tmax_code // and its largest code of non zero frequency\r\n\t\t) {\r\n\t\t\tvar n; // iterates over all tree elements\r\n\t\t\tvar prevlen = -1; // last emitted length\r\n\t\t\tvar curlen; // length of current code\r\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\r\n\t\t\tvar count = 0; // repeat count of the current code\r\n\t\t\tvar max_count = 7; // max repeat count\r\n\t\t\tvar min_count = 4; // min repeat count\r\n\r\n\t\t\tif (nextlen === 0) {\r\n\t\t\t\tmax_count = 138;\r\n\t\t\t\tmin_count = 3;\r\n\t\t\t}\r\n\t\t\ttree[(max_code + 1) * 2 + 1] = 0xffff; // guard\r\n\r\n\t\t\tfor (n = 0; n <= max_code; n++) {\r\n\t\t\t\tcurlen = nextlen;\r\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\r\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else if (count < min_count) {\r\n\t\t\t\t\tbl_tree[curlen * 2] += count;\r\n\t\t\t\t} else if (curlen !== 0) {\r\n\t\t\t\t\tif (curlen != prevlen)\r\n\t\t\t\t\t\tbl_tree[curlen * 2]++;\r\n\t\t\t\t\tbl_tree[REP_3_6 * 2]++;\r\n\t\t\t\t} else if (count <= 10) {\r\n\t\t\t\t\tbl_tree[REPZ_3_10 * 2]++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbl_tree[REPZ_11_138 * 2]++;\r\n\t\t\t\t}\r\n\t\t\t\tcount = 0;\r\n\t\t\t\tprevlen = curlen;\r\n\t\t\t\tif (nextlen === 0) {\r\n\t\t\t\t\tmax_count = 138;\r\n\t\t\t\t\tmin_count = 3;\r\n\t\t\t\t} else if (curlen == nextlen) {\r\n\t\t\t\t\tmax_count = 6;\r\n\t\t\t\t\tmin_count = 3;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmax_count = 7;\r\n\t\t\t\t\tmin_count = 4;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Construct the Huffman tree for the bit lengths and return the index in\r\n\t\t// bl_order of the last bit length code to send.\r\n\t\tfunction build_bl_tree() {\r\n\t\t\tvar max_blindex; // index of last bit length code of non zero freq\r\n\r\n\t\t\t// Determine the bit length frequencies for literal and distance trees\r\n\t\t\tscan_tree(dyn_ltree, l_desc.max_code);\r\n\t\t\tscan_tree(dyn_dtree, d_desc.max_code);\r\n\r\n\t\t\t// Build the bit length tree:\r\n\t\t\tbl_desc.build_tree(that);\r\n\t\t\t// opt_len now includes the length of the tree representations, except\r\n\t\t\t// the lengths of the bit lengths codes and the 5+5+4 bits for the\r\n\t\t\t// counts.\r\n\r\n\t\t\t// Determine the number of bit length codes to send. The pkzip format\r\n\t\t\t// requires that at least 4 bit length codes be sent. (appnote.txt says\r\n\t\t\t// 3 but the actual value used is 4.)\r\n\t\t\tfor (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\r\n\t\t\t\tif (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// Update opt_len to include the bit length tree and counts\r\n\t\t\tthat.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\r\n\r\n\t\t\treturn max_blindex;\r\n\t\t}\r\n\r\n\t\t// Output a byte on the stream.\r\n\t\t// IN assertion: there is enough room in pending_buf.\r\n\t\tfunction put_byte(p) {\r\n\t\t\tthat.pending_buf[that.pending++] = p;\r\n\t\t}\r\n\r\n\t\tfunction put_short(w) {\r\n\t\t\tput_byte(w & 0xff);\r\n\t\t\tput_byte((w >>> 8) & 0xff);\r\n\t\t}\r\n\r\n\t\tfunction putShortMSB(b) {\r\n\t\t\tput_byte((b >> 8) & 0xff);\r\n\t\t\tput_byte((b & 0xff) & 0xff);\r\n\t\t}\r\n\r\n\t\tfunction send_bits(value, length) {\r\n\t\t\tvar val, len = length;\r\n\t\t\tif (bi_valid > Buf_size - len) {\r\n\t\t\t\tval = value;\r\n\t\t\t\t// bi_buf |= (val << bi_valid);\r\n\t\t\t\tbi_buf |= ((val << bi_valid) & 0xffff);\r\n\t\t\t\tput_short(bi_buf);\r\n\t\t\t\tbi_buf = val >>> (Buf_size - bi_valid);\r\n\t\t\t\tbi_valid += len - Buf_size;\r\n\t\t\t} else {\r\n\t\t\t\t// bi_buf |= (value) << bi_valid;\r\n\t\t\t\tbi_buf |= (((value) << bi_valid) & 0xffff);\r\n\t\t\t\tbi_valid += len;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction send_code(c, tree) {\r\n\t\t\tvar c2 = c * 2;\r\n\t\t\tsend_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);\r\n\t\t}\r\n\r\n\t\t// Send a literal or distance tree in compressed form, using the codes in\r\n\t\t// bl_tree.\r\n\t\tfunction send_tree(tree,// the tree to be sent\r\n\t\tmax_code // and its largest code of non zero frequency\r\n\t\t) {\r\n\t\t\tvar n; // iterates over all tree elements\r\n\t\t\tvar prevlen = -1; // last emitted length\r\n\t\t\tvar curlen; // length of current code\r\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\r\n\t\t\tvar count = 0; // repeat count of the current code\r\n\t\t\tvar max_count = 7; // max repeat count\r\n\t\t\tvar min_count = 4; // min repeat count\r\n\r\n\t\t\tif (nextlen === 0) {\r\n\t\t\t\tmax_count = 138;\r\n\t\t\t\tmin_count = 3;\r\n\t\t\t}\r\n\r\n\t\t\tfor (n = 0; n <= max_code; n++) {\r\n\t\t\t\tcurlen = nextlen;\r\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\r\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else if (count < min_count) {\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\r\n\t\t\t\t\t} while (--count !== 0);\r\n\t\t\t\t} else if (curlen !== 0) {\r\n\t\t\t\t\tif (curlen != prevlen) {\r\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\r\n\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsend_code(REP_3_6, bl_tree);\r\n\t\t\t\t\tsend_bits(count - 3, 2);\r\n\t\t\t\t} else if (count <= 10) {\r\n\t\t\t\t\tsend_code(REPZ_3_10, bl_tree);\r\n\t\t\t\t\tsend_bits(count - 3, 3);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsend_code(REPZ_11_138, bl_tree);\r\n\t\t\t\t\tsend_bits(count - 11, 7);\r\n\t\t\t\t}\r\n\t\t\t\tcount = 0;\r\n\t\t\t\tprevlen = curlen;\r\n\t\t\t\tif (nextlen === 0) {\r\n\t\t\t\t\tmax_count = 138;\r\n\t\t\t\t\tmin_count = 3;\r\n\t\t\t\t} else if (curlen == nextlen) {\r\n\t\t\t\t\tmax_count = 6;\r\n\t\t\t\t\tmin_count = 3;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmax_count = 7;\r\n\t\t\t\t\tmin_count = 4;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Send the header for a block using dynamic Huffman trees: the counts, the\r\n\t\t// lengths of the bit length codes, the literal tree and the distance tree.\r\n\t\t// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\r\n\t\tfunction send_all_trees(lcodes, dcodes, blcodes) {\r\n\t\t\tvar rank; // index in bl_order\r\n\r\n\t\t\tsend_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\r\n\t\t\tsend_bits(dcodes - 1, 5);\r\n\t\t\tsend_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\r\n\t\t\tfor (rank = 0; rank < blcodes; rank++) {\r\n\t\t\t\tsend_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);\r\n\t\t\t}\r\n\t\t\tsend_tree(dyn_ltree, lcodes - 1); // literal tree\r\n\t\t\tsend_tree(dyn_dtree, dcodes - 1); // distance tree\r\n\t\t}\r\n\r\n\t\t// Flush the bit buffer, keeping at most 7 bits in it.\r\n\t\tfunction bi_flush() {\r\n\t\t\tif (bi_valid == 16) {\r\n\t\t\t\tput_short(bi_buf);\r\n\t\t\t\tbi_buf = 0;\r\n\t\t\t\tbi_valid = 0;\r\n\t\t\t} else if (bi_valid >= 8) {\r\n\t\t\t\tput_byte(bi_buf & 0xff);\r\n\t\t\t\tbi_buf >>>= 8;\r\n\t\t\t\tbi_valid -= 8;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Send one empty static block to give enough lookahead for inflate.\r\n\t\t// This takes 10 bits, of which 7 may remain in the bit buffer.\r\n\t\t// The current inflate code requires 9 bits of lookahead. If the\r\n\t\t// last two codes for the previous block (real code plus EOB) were coded\r\n\t\t// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode\r\n\t\t// the last real code. In this case we send two empty static blocks instead\r\n\t\t// of one. (There are no problems if the previous block is stored or fixed.)\r\n\t\t// To simplify the code, we assume the worst case of last real code encoded\r\n\t\t// on one bit only.\r\n\t\tfunction _tr_align() {\r\n\t\t\tsend_bits(STATIC_TREES << 1, 3);\r\n\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\r\n\r\n\t\t\tbi_flush();\r\n\r\n\t\t\t// Of the 10 bits for the empty block, we have already sent\r\n\t\t\t// (10 - bi_valid) bits. The lookahead for the last real code (before\r\n\t\t\t// the EOB of the previous block) was thus at least one plus the length\r\n\t\t\t// of the EOB plus what we have just sent of the empty static block.\r\n\t\t\tif (1 + last_eob_len + 10 - bi_valid < 9) {\r\n\t\t\t\tsend_bits(STATIC_TREES << 1, 3);\r\n\t\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\r\n\t\t\t\tbi_flush();\r\n\t\t\t}\r\n\t\t\tlast_eob_len = 7;\r\n\t\t}\r\n\r\n\t\t// Save the match info and tally the frequency counts. Return true if\r\n\t\t// the current block must be flushed.\r\n\t\tfunction _tr_tally(dist, // distance of matched string\r\n\t\tlc // match length-MIN_MATCH or unmatched char (if dist==0)\r\n\t\t) {\r\n\t\t\tvar out_length, in_length, dcode;\r\n\t\t\tthat.pending_buf[d_buf + last_lit * 2] = (dist >>> 8) & 0xff;\r\n\t\t\tthat.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;\r\n\r\n\t\t\tthat.pending_buf[l_buf + last_lit] = lc & 0xff;\r\n\t\t\tlast_lit++;\r\n\r\n\t\t\tif (dist === 0) {\r\n\t\t\t\t// lc is the unmatched char\r\n\t\t\t\tdyn_ltree[lc * 2]++;\r\n\t\t\t} else {\r\n\t\t\t\tmatches++;\r\n\t\t\t\t// Here, lc is the match length - MIN_MATCH\r\n\t\t\t\tdist--; // dist = match distance - 1\r\n\t\t\t\tdyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;\r\n\t\t\t\tdyn_dtree[Tree.d_code(dist) * 2]++;\r\n\t\t\t}\r\n\r\n\t\t\tif ((last_lit & 0x1fff) === 0 && level > 2) {\r\n\t\t\t\t// Compute an upper bound for the compressed length\r\n\t\t\t\tout_length = last_lit * 8;\r\n\t\t\t\tin_length = strstart - block_start;\r\n\t\t\t\tfor (dcode = 0; dcode < D_CODES; dcode++) {\r\n\t\t\t\t\tout_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);\r\n\t\t\t\t}\r\n\t\t\t\tout_length >>>= 3;\r\n\t\t\t\tif ((matches < Math.floor(last_lit / 2)) && out_length < Math.floor(in_length / 2))\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn (last_lit == lit_bufsize - 1);\r\n\t\t\t// We avoid equality with lit_bufsize because of wraparound at 64K\r\n\t\t\t// on 16 bit machines and because stored blocks are restricted to\r\n\t\t\t// 64K-1 bytes.\r\n\t\t}\r\n\r\n\t\t// Send the block data compressed using the given Huffman trees\r\n\t\tfunction compress_block(ltree, dtree) {\r\n\t\t\tvar dist; // distance of matched string\r\n\t\t\tvar lc; // match length or unmatched char (if dist === 0)\r\n\t\t\tvar lx = 0; // running index in l_buf\r\n\t\t\tvar code; // the code to send\r\n\t\t\tvar extra; // number of extra bits to send\r\n\r\n\t\t\tif (last_lit !== 0) {\r\n\t\t\t\tdo {\r\n\t\t\t\t\tdist = ((that.pending_buf[d_buf + lx * 2] << 8) & 0xff00) | (that.pending_buf[d_buf + lx * 2 + 1] & 0xff);\r\n\t\t\t\t\tlc = (that.pending_buf[l_buf + lx]) & 0xff;\r\n\t\t\t\t\tlx++;\r\n\r\n\t\t\t\t\tif (dist === 0) {\r\n\t\t\t\t\t\tsend_code(lc, ltree); // send a literal byte\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Here, lc is the match length - MIN_MATCH\r\n\t\t\t\t\t\tcode = Tree._length_code[lc];\r\n\r\n\t\t\t\t\t\tsend_code(code + LITERALS + 1, ltree); // send the length\r\n\t\t\t\t\t\t// code\r\n\t\t\t\t\t\textra = Tree.extra_lbits[code];\r\n\t\t\t\t\t\tif (extra !== 0) {\r\n\t\t\t\t\t\t\tlc -= Tree.base_length[code];\r\n\t\t\t\t\t\t\tsend_bits(lc, extra); // send the extra length bits\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdist--; // dist is now the match distance - 1\r\n\t\t\t\t\t\tcode = Tree.d_code(dist);\r\n\r\n\t\t\t\t\t\tsend_code(code, dtree); // send the distance code\r\n\t\t\t\t\t\textra = Tree.extra_dbits[code];\r\n\t\t\t\t\t\tif (extra !== 0) {\r\n\t\t\t\t\t\t\tdist -= Tree.base_dist[code];\r\n\t\t\t\t\t\t\tsend_bits(dist, extra); // send the extra distance bits\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} // literal or match pair ?\r\n\r\n\t\t\t\t\t// Check that the overlay between pending_buf and d_buf+l_buf is\r\n\t\t\t\t\t// ok:\r\n\t\t\t\t} while (lx < last_lit);\r\n\t\t\t}\r\n\r\n\t\t\tsend_code(END_BLOCK, ltree);\r\n\t\t\tlast_eob_len = ltree[END_BLOCK * 2 + 1];\r\n\t\t}\r\n\r\n\t\t// Flush the bit buffer and align the output on a byte boundary\r\n\t\tfunction bi_windup() {\r\n\t\t\tif (bi_valid > 8) {\r\n\t\t\t\tput_short(bi_buf);\r\n\t\t\t} else if (bi_valid > 0) {\r\n\t\t\t\tput_byte(bi_buf & 0xff);\r\n\t\t\t}\r\n\t\t\tbi_buf = 0;\r\n\t\t\tbi_valid = 0;\r\n\t\t}\r\n\r\n\t\t// Copy a stored block, storing first the length and its\r\n\t\t// one's complement if requested.\r\n\t\tfunction copy_block(buf, // the input data\r\n\t\tlen, // its length\r\n\t\theader // true if block header must be written\r\n\t\t) {\r\n\t\t\tbi_windup(); // align on byte boundary\r\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\r\n\r\n\t\t\tif (header) {\r\n\t\t\t\tput_short(len);\r\n\t\t\t\tput_short(~len);\r\n\t\t\t}\r\n\r\n\t\t\tthat.pending_buf.set(window.subarray(buf, buf + len), that.pending);\r\n\t\t\tthat.pending += len;\r\n\t\t}\r\n\r\n\t\t// Send a stored block\r\n\t\tfunction _tr_stored_block(buf, // input block\r\n\t\tstored_len, // length of input block\r\n\t\teof // true if this is the last block for a file\r\n\t\t) {\r\n\t\t\tsend_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type\r\n\t\t\tcopy_block(buf, stored_len, true); // with header\r\n\t\t}\r\n\r\n\t\t// Determine the best encoding for the current block: dynamic trees, static\r\n\t\t// trees or store, and output the encoded block to the zip file.\r\n\t\tfunction _tr_flush_block(buf, // input block, or NULL if too old\r\n\t\tstored_len, // length of input block\r\n\t\teof // true if this is the last block for a file\r\n\t\t) {\r\n\t\t\tvar opt_lenb, static_lenb;// opt_len and static_len in bytes\r\n\t\t\tvar max_blindex = 0; // index of last bit length code of non zero freq\r\n\r\n\t\t\t// Build the Huffman trees unless a stored block is forced\r\n\t\t\tif (level > 0) {\r\n\t\t\t\t// Construct the literal and distance trees\r\n\t\t\t\tl_desc.build_tree(that);\r\n\r\n\t\t\t\td_desc.build_tree(that);\r\n\r\n\t\t\t\t// At this point, opt_len and static_len are the total bit lengths\r\n\t\t\t\t// of\r\n\t\t\t\t// the compressed block data, excluding the tree representations.\r\n\r\n\t\t\t\t// Build the bit length tree for the above two trees, and get the\r\n\t\t\t\t// index\r\n\t\t\t\t// in bl_order of the last bit length code to send.\r\n\t\t\t\tmax_blindex = build_bl_tree();\r\n\r\n\t\t\t\t// Determine the best encoding. Compute first the block length in\r\n\t\t\t\t// bytes\r\n\t\t\t\topt_lenb = (that.opt_len + 3 + 7) >>> 3;\r\n\t\t\t\tstatic_lenb = (that.static_len + 3 + 7) >>> 3;\r\n\r\n\t\t\t\tif (static_lenb <= opt_lenb)\r\n\t\t\t\t\topt_lenb = static_lenb;\r\n\t\t\t} else {\r\n\t\t\t\topt_lenb = static_lenb = stored_len + 5; // force a stored block\r\n\t\t\t}\r\n\r\n\t\t\tif ((stored_len + 4 <= opt_lenb) && buf != -1) {\r\n\t\t\t\t// 4: two words for the lengths\r\n\t\t\t\t// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\r\n\t\t\t\t// Otherwise we can't have processed more than WSIZE input bytes\r\n\t\t\t\t// since\r\n\t\t\t\t// the last block flush, because compression would have been\r\n\t\t\t\t// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\r\n\t\t\t\t// transform a block into a stored block.\r\n\t\t\t\t_tr_stored_block(buf, stored_len, eof);\r\n\t\t\t} else if (static_lenb == opt_lenb) {\r\n\t\t\t\tsend_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);\r\n\t\t\t\tcompress_block(StaticTree.static_ltree, StaticTree.static_dtree);\r\n\t\t\t} else {\r\n\t\t\t\tsend_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);\r\n\t\t\t\tsend_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\r\n\t\t\t\tcompress_block(dyn_ltree, dyn_dtree);\r\n\t\t\t}\r\n\r\n\t\t\t// The above check is made mod 2^32, for files larger than 512 MB\r\n\t\t\t// and uLong implemented on 32 bits.\r\n\r\n\t\t\tinit_block();\r\n\r\n\t\t\tif (eof) {\r\n\t\t\t\tbi_windup();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction flush_block_only(eof) {\r\n\t\t\t_tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);\r\n\t\t\tblock_start = strstart;\r\n\t\t\tstrm.flush_pending();\r\n\t\t}\r\n\r\n\t\t// Fill the window when the lookahead becomes insufficient.\r\n\t\t// Updates strstart and lookahead.\r\n\t\t//\r\n\t\t// IN assertion: lookahead < MIN_LOOKAHEAD\r\n\t\t// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\r\n\t\t// At least one byte has been read, or avail_in === 0; reads are\r\n\t\t// performed for at least two bytes (required for the zip translate_eol\r\n\t\t// option -- not supported here).\r\n\t\tfunction fill_window() {\r\n\t\t\tvar n, m;\r\n\t\t\tvar p;\r\n\t\t\tvar more; // Amount of free space at the end of the window.\r\n\r\n\t\t\tdo {\r\n\t\t\t\tmore = (window_size - lookahead - strstart);\r\n\r\n\t\t\t\t// Deal with !@#$% 64K limit:\r\n\t\t\t\tif (more === 0 && strstart === 0 && lookahead === 0) {\r\n\t\t\t\t\tmore = w_size;\r\n\t\t\t\t} else if (more == -1) {\r\n\t\t\t\t\t// Very unlikely, but possible on 16 bit machine if strstart ==\r\n\t\t\t\t\t// 0\r\n\t\t\t\t\t// and lookahead == 1 (input done one byte at time)\r\n\t\t\t\t\tmore--;\r\n\r\n\t\t\t\t\t// If the window is almost full and there is insufficient\r\n\t\t\t\t\t// lookahead,\r\n\t\t\t\t\t// move the upper half to the lower one to make room in the\r\n\t\t\t\t\t// upper half.\r\n\t\t\t\t} else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {\r\n\t\t\t\t\twindow.set(window.subarray(w_size, w_size + w_size), 0);\r\n\r\n\t\t\t\t\tmatch_start -= w_size;\r\n\t\t\t\t\tstrstart -= w_size; // we now have strstart >= MAX_DIST\r\n\t\t\t\t\tblock_start -= w_size;\r\n\r\n\t\t\t\t\t// Slide the hash table (could be avoided with 32 bit values\r\n\t\t\t\t\t// at the expense of memory usage). We slide even when level ==\r\n\t\t\t\t\t// 0\r\n\t\t\t\t\t// to keep the hash table consistent if we switch back to level\r\n\t\t\t\t\t// > 0\r\n\t\t\t\t\t// later. (Using level 0 permanently is not an optimal usage of\r\n\t\t\t\t\t// zlib, so we don't care about this pathological case.)\r\n\r\n\t\t\t\t\tn = hash_size;\r\n\t\t\t\t\tp = n;\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tm = (head[--p] & 0xffff);\r\n\t\t\t\t\t\thead[p] = (m >= w_size ? m - w_size : 0);\r\n\t\t\t\t\t} while (--n !== 0);\r\n\r\n\t\t\t\t\tn = w_size;\r\n\t\t\t\t\tp = n;\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tm = (prev[--p] & 0xffff);\r\n\t\t\t\t\t\tprev[p] = (m >= w_size ? m - w_size : 0);\r\n\t\t\t\t\t\t// If n is not on any hash chain, prev[n] is garbage but\r\n\t\t\t\t\t\t// its value will never be used.\r\n\t\t\t\t\t} while (--n !== 0);\r\n\t\t\t\t\tmore += w_size;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (strm.avail_in === 0)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t// If there was no sliding:\r\n\t\t\t\t// strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\r\n\t\t\t\t// more == window_size - lookahead - strstart\r\n\t\t\t\t// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\r\n\t\t\t\t// => more >= window_size - 2*WSIZE + 2\r\n\t\t\t\t// In the BIG_MEM or MMAP case (not yet supported),\r\n\t\t\t\t// window_size == input_size + MIN_LOOKAHEAD &&\r\n\t\t\t\t// strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\r\n\t\t\t\t// Otherwise, window_size == 2*WSIZE so more >= 2.\r\n\t\t\t\t// If there was sliding, more >= WSIZE. So in all cases, more >= 2.\r\n\r\n\t\t\t\tn = strm.read_buf(window, strstart + lookahead, more);\r\n\t\t\t\tlookahead += n;\r\n\r\n\t\t\t\t// Initialize the hash value now that we have some input:\r\n\t\t\t\tif (lookahead >= MIN_MATCH) {\r\n\t\t\t\t\tins_h = window[strstart] & 0xff;\r\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\r\n\t\t\t\t}\r\n\t\t\t\t// If the whole input has less than MIN_MATCH bytes, ins_h is\r\n\t\t\t\t// garbage,\r\n\t\t\t\t// but this is not important since only literal bytes will be\r\n\t\t\t\t// emitted.\r\n\t\t\t} while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);\r\n\t\t}\r\n\r\n\t\t// Copy without compression as much as possible from the input stream,\r\n\t\t// return\r\n\t\t// the current block state.\r\n\t\t// This function does not insert new strings in the dictionary since\r\n\t\t// uncompressible data is probably not useful. This function is used\r\n\t\t// only for the level=0 compression option.\r\n\t\t// NOTE: this function should be optimized to avoid extra copying from\r\n\t\t// window to pending_buf.\r\n\t\tfunction deflate_stored(flush) {\r\n\t\t\t// Stored blocks are limited to 0xffff bytes, pending_buf is limited\r\n\t\t\t// to pending_buf_size, and each stored block has a 5 byte header:\r\n\r\n\t\t\tvar max_block_size = 0xffff;\r\n\t\t\tvar max_start;\r\n\r\n\t\t\tif (max_block_size > pending_buf_size - 5) {\r\n\t\t\t\tmax_block_size = pending_buf_size - 5;\r\n\t\t\t}\r\n\r\n\t\t\t// Copy as much as possible from input to output:\r\n\t\t\twhile (true) {\r\n\t\t\t\t// Fill the window as much as possible:\r\n\t\t\t\tif (lookahead <= 1) {\r\n\t\t\t\t\tfill_window();\r\n\t\t\t\t\tif (lookahead === 0 && flush == Z_NO_FLUSH)\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t\tif (lookahead === 0)\r\n\t\t\t\t\t\tbreak; // flush the current block\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstrstart += lookahead;\r\n\t\t\t\tlookahead = 0;\r\n\r\n\t\t\t\t// Emit a stored block if pending_buf will be full:\r\n\t\t\t\tmax_start = block_start + max_block_size;\r\n\t\t\t\tif (strstart === 0 || strstart >= max_start) {\r\n\t\t\t\t\t// strstart === 0 is possible when wraparound on 16-bit machine\r\n\t\t\t\t\tlookahead = (strstart - max_start);\r\n\t\t\t\t\tstrstart = max_start;\r\n\r\n\t\t\t\t\tflush_block_only(false);\r\n\t\t\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\t\t\treturn NeedMore;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Flush if we may have to slide, otherwise block_start may become\r\n\t\t\t\t// negative and the data will be gone:\r\n\t\t\t\tif (strstart - block_start >= w_size - MIN_LOOKAHEAD) {\r\n\t\t\t\t\tflush_block_only(false);\r\n\t\t\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tflush_block_only(flush == Z_FINISH);\r\n\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\treturn (flush == Z_FINISH) ? FinishStarted : NeedMore;\r\n\r\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\r\n\t\t}\r\n\r\n\t\tfunction longest_match(cur_match) {\r\n\t\t\tvar chain_length = max_chain_length; // max hash chain length\r\n\t\t\tvar scan = strstart; // current string\r\n\t\t\tvar match; // matched string\r\n\t\t\tvar len; // length of current match\r\n\t\t\tvar best_len = prev_length; // best match length so far\r\n\t\t\tvar limit = strstart > (w_size - MIN_LOOKAHEAD) ? strstart - (w_size - MIN_LOOKAHEAD) : 0;\r\n\t\t\tvar _nice_match = nice_match;\r\n\r\n\t\t\t// Stop when cur_match becomes <= limit. To simplify the code,\r\n\t\t\t// we prevent matches with the string of window index 0.\r\n\r\n\t\t\tvar wmask = w_mask;\r\n\r\n\t\t\tvar strend = strstart + MAX_MATCH;\r\n\t\t\tvar scan_end1 = window[scan + best_len - 1];\r\n\t\t\tvar scan_end = window[scan + best_len];\r\n\r\n\t\t\t// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of\r\n\t\t\t// 16.\r\n\t\t\t// It is easy to get rid of this optimization if necessary.\r\n\r\n\t\t\t// Do not waste too much time if we already have a good match:\r\n\t\t\tif (prev_length >= good_match) {\r\n\t\t\t\tchain_length >>= 2;\r\n\t\t\t}\r\n\r\n\t\t\t// Do not look for matches beyond the end of the input. This is\r\n\t\t\t// necessary\r\n\t\t\t// to make deflate deterministic.\r\n\t\t\tif (_nice_match > lookahead)\r\n\t\t\t\t_nice_match = lookahead;\r\n\r\n\t\t\tdo {\r\n\t\t\t\tmatch = cur_match;\r\n\r\n\t\t\t\t// Skip to next match if the match length cannot increase\r\n\t\t\t\t// or if the match length is less than 2:\r\n\t\t\t\tif (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan]\r\n\t\t\t\t\t\t|| window[++match] != window[scan + 1])\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t// The check at best_len-1 can be removed because it will be made\r\n\t\t\t\t// again later. (This heuristic is not always a win.)\r\n\t\t\t\t// It is not necessary to compare scan[2] and match[2] since they\r\n\t\t\t\t// are always equal when the other bytes match, given that\r\n\t\t\t\t// the hash keys are equal and that HASH_BITS >= 8.\r\n\t\t\t\tscan += 2;\r\n\t\t\t\tmatch++;\r\n\r\n\t\t\t\t// We check for insufficient lookahead only every 8th comparison;\r\n\t\t\t\t// the 256th check will be made at strstart+258.\r\n\t\t\t\tdo {\r\n\t\t\t\t} while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\r\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\r\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);\r\n\r\n\t\t\t\tlen = MAX_MATCH - (strend - scan);\r\n\t\t\t\tscan = strend - MAX_MATCH;\r\n\r\n\t\t\t\tif (len > best_len) {\r\n\t\t\t\t\tmatch_start = cur_match;\r\n\t\t\t\t\tbest_len = len;\r\n\t\t\t\t\tif (len >= _nice_match)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tscan_end1 = window[scan + best_len - 1];\r\n\t\t\t\t\tscan_end = window[scan + best_len];\r\n\t\t\t\t}\r\n\r\n\t\t\t} while ((cur_match = (prev[cur_match & wmask] & 0xffff)) > limit && --chain_length !== 0);\r\n\r\n\t\t\tif (best_len <= lookahead)\r\n\t\t\t\treturn best_len;\r\n\t\t\treturn lookahead;\r\n\t\t}\r\n\r\n\t\t// Compress as much as possible from the input stream, return the current\r\n\t\t// block state.\r\n\t\t// This function does not perform lazy evaluation of matches and inserts\r\n\t\t// new strings in the dictionary only for unmatched strings or for short\r\n\t\t// matches. It is used only for the fast compression options.\r\n\t\tfunction deflate_fast(flush) {\r\n\t\t\t// short hash_head = 0; // head of the hash chain\r\n\t\t\tvar hash_head = 0; // head of the hash chain\r\n\t\t\tvar bflush; // set if current block must be flushed\r\n\r\n\t\t\twhile (true) {\r\n\t\t\t\t// Make sure that we always have enough lookahead, except\r\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\r\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\r\n\t\t\t\t// string following the next match.\r\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\r\n\t\t\t\t\tfill_window();\r\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (lookahead === 0)\r\n\t\t\t\t\t\tbreak; // flush the current block\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\r\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\r\n\t\t\t\tif (lookahead >= MIN_MATCH) {\r\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\r\n\r\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\r\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\r\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\r\n\t\t\t\t\thead[ins_h] = strstart;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\r\n\t\t\t\t// At this point we have always match_length < MIN_MATCH\r\n\r\n\t\t\t\tif (hash_head !== 0 && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\r\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\r\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\r\n\t\t\t\t\t// of the string with itself at the start of the input file).\r\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\r\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// longest_match() sets match_start\r\n\t\t\t\t}\r\n\t\t\t\tif (match_length >= MIN_MATCH) {\r\n\t\t\t\t\t// check_match(strstart, match_start, match_length);\r\n\r\n\t\t\t\t\tbflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);\r\n\r\n\t\t\t\t\tlookahead -= match_length;\r\n\r\n\t\t\t\t\t// Insert new strings in the hash table only if the match length\r\n\t\t\t\t\t// is not too large. This saves time but degrades compression.\r\n\t\t\t\t\tif (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {\r\n\t\t\t\t\t\tmatch_length--; // string at strstart already in hash table\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tstrstart++;\r\n\r\n\t\t\t\t\t\t\tins_h = ((ins_h << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\r\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\r\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\r\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\r\n\t\t\t\t\t\t\thead[ins_h] = strstart;\r\n\r\n\t\t\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\r\n\t\t\t\t\t\t\t// always MIN_MATCH bytes ahead.\r\n\t\t\t\t\t\t} while (--match_length !== 0);\r\n\t\t\t\t\t\tstrstart++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstrstart += match_length;\r\n\t\t\t\t\t\tmatch_length = 0;\r\n\t\t\t\t\t\tins_h = window[strstart] & 0xff;\r\n\r\n\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\r\n\t\t\t\t\t\t// If lookahead < MIN_MATCH, ins_h is garbage, but it does\r\n\t\t\t\t\t\t// not\r\n\t\t\t\t\t\t// matter since it will be recomputed at next deflate call.\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// No match, output a literal byte\r\n\r\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart] & 0xff);\r\n\t\t\t\t\tlookahead--;\r\n\t\t\t\t\tstrstart++;\r\n\t\t\t\t}\r\n\t\t\t\tif (bflush) {\r\n\r\n\t\t\t\t\tflush_block_only(false);\r\n\t\t\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tflush_block_only(flush == Z_FINISH);\r\n\t\t\tif (strm.avail_out === 0) {\r\n\t\t\t\tif (flush == Z_FINISH)\r\n\t\t\t\t\treturn FinishStarted;\r\n\t\t\t\telse\r\n\t\t\t\t\treturn NeedMore;\r\n\t\t\t}\r\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\r\n\t\t}\r\n\r\n\t\t// Same as above, but achieves better compression. We use a lazy\r\n\t\t// evaluation for matches: a match is finally adopted only if there is\r\n\t\t// no better match at the next window position.\r\n\t\tfunction deflate_slow(flush) {\r\n\t\t\t// short hash_head = 0; // head of hash chain\r\n\t\t\tvar hash_head = 0; // head of hash chain\r\n\t\t\tvar bflush; // set if current block must be flushed\r\n\t\t\tvar max_insert;\r\n\r\n\t\t\t// Process the input block.\r\n\t\t\twhile (true) {\r\n\t\t\t\t// Make sure that we always have enough lookahead, except\r\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\r\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\r\n\t\t\t\t// string following the next match.\r\n\r\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\r\n\t\t\t\t\tfill_window();\r\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (lookahead === 0)\r\n\t\t\t\t\t\tbreak; // flush the current block\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\r\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\r\n\r\n\t\t\t\tif (lookahead >= MIN_MATCH) {\r\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\r\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\r\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\r\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\r\n\t\t\t\t\thead[ins_h] = strstart;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\r\n\t\t\t\tprev_length = match_length;\r\n\t\t\t\tprev_match = match_start;\r\n\t\t\t\tmatch_length = MIN_MATCH - 1;\r\n\r\n\t\t\t\tif (hash_head !== 0 && prev_length < max_lazy_match && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\r\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\r\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\r\n\t\t\t\t\t// of the string with itself at the start of the input file).\r\n\r\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\r\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// longest_match() sets match_start\r\n\r\n\t\t\t\t\tif (match_length <= 5 && (strategy == Z_FILTERED || (match_length == MIN_MATCH && strstart - match_start > 4096))) {\r\n\r\n\t\t\t\t\t\t// If prev_match is also MIN_MATCH, match_start is garbage\r\n\t\t\t\t\t\t// but we will ignore the current match anyway.\r\n\t\t\t\t\t\tmatch_length = MIN_MATCH - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If there was a match at the previous step and the current\r\n\t\t\t\t// match is not better, output the previous match:\r\n\t\t\t\tif (prev_length >= MIN_MATCH && match_length <= prev_length) {\r\n\t\t\t\t\tmax_insert = strstart + lookahead - MIN_MATCH;\r\n\t\t\t\t\t// Do not insert strings in hash table beyond this.\r\n\r\n\t\t\t\t\t// check_match(strstart-1, prev_match, prev_length);\r\n\r\n\t\t\t\t\tbflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);\r\n\r\n\t\t\t\t\t// Insert in hash table all strings up to the end of the match.\r\n\t\t\t\t\t// strstart-1 and strstart are already inserted. If there is not\r\n\t\t\t\t\t// enough lookahead, the last two strings are not inserted in\r\n\t\t\t\t\t// the hash table.\r\n\t\t\t\t\tlookahead -= prev_length - 1;\r\n\t\t\t\t\tprev_length -= 2;\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tif (++strstart <= max_insert) {\r\n\t\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\r\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\r\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\r\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\r\n\t\t\t\t\t\t\thead[ins_h] = strstart;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} while (--prev_length !== 0);\r\n\t\t\t\t\tmatch_available = 0;\r\n\t\t\t\t\tmatch_length = MIN_MATCH - 1;\r\n\t\t\t\t\tstrstart++;\r\n\r\n\t\t\t\t\tif (bflush) {\r\n\t\t\t\t\t\tflush_block_only(false);\r\n\t\t\t\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (match_available !== 0) {\r\n\r\n\t\t\t\t\t// If there was no match at the previous position, output a\r\n\t\t\t\t\t// single literal. If there was a match but the current match\r\n\t\t\t\t\t// is longer, truncate the previous match to a single literal.\r\n\r\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\r\n\r\n\t\t\t\t\tif (bflush) {\r\n\t\t\t\t\t\tflush_block_only(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstrstart++;\r\n\t\t\t\t\tlookahead--;\r\n\t\t\t\t\tif (strm.avail_out === 0)\r\n\t\t\t\t\t\treturn NeedMore;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// There is no previous match to compare with, wait for\r\n\t\t\t\t\t// the next step to decide.\r\n\r\n\t\t\t\t\tmatch_available = 1;\r\n\t\t\t\t\tstrstart++;\r\n\t\t\t\t\tlookahead--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (match_available !== 0) {\r\n\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\r\n\t\t\t\tmatch_available = 0;\r\n\t\t\t}\r\n\t\t\tflush_block_only(flush == Z_FINISH);\r\n\r\n\t\t\tif (strm.avail_out === 0) {\r\n\t\t\t\tif (flush == Z_FINISH)\r\n\t\t\t\t\treturn FinishStarted;\r\n\t\t\t\telse\r\n\t\t\t\t\treturn NeedMore;\r\n\t\t\t}\r\n\r\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\r\n\t\t}\r\n\r\n\t\tfunction deflateReset(strm) {\r\n\t\t\tstrm.total_in = strm.total_out = 0;\r\n\t\t\tstrm.msg = null; //\r\n\t\t\t\r\n\t\t\tthat.pending = 0;\r\n\t\t\tthat.pending_out = 0;\r\n\r\n\t\t\tstatus = BUSY_STATE;\r\n\r\n\t\t\tlast_flush = Z_NO_FLUSH;\r\n\r\n\t\t\ttr_init();\r\n\t\t\tlm_init();\r\n\t\t\treturn Z_OK;\r\n\t\t}\r\n\r\n\t\tthat.deflateInit = function(strm, _level, bits, _method, memLevel, _strategy) {\r\n\t\t\tif (!_method)\r\n\t\t\t\t_method = Z_DEFLATED;\r\n\t\t\tif (!memLevel)\r\n\t\t\t\tmemLevel = DEF_MEM_LEVEL;\r\n\t\t\tif (!_strategy)\r\n\t\t\t\t_strategy = Z_DEFAULT_STRATEGY;\r\n\r\n\t\t\t// byte[] my_version=ZLIB_VERSION;\r\n\r\n\t\t\t//\r\n\t\t\t// if (!version || version[0] != my_version[0]\r\n\t\t\t// || stream_size != sizeof(z_stream)) {\r\n\t\t\t// return Z_VERSION_ERROR;\r\n\t\t\t// }\r\n\r\n\t\t\tstrm.msg = null;\r\n\r\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION)\r\n\t\t\t\t_level = 6;\r\n\r\n\t\t\tif (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0\r\n\t\t\t\t\t|| _strategy > Z_HUFFMAN_ONLY) {\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\tstrm.dstate = that;\r\n\r\n\t\t\tw_bits = bits;\r\n\t\t\tw_size = 1 << w_bits;\r\n\t\t\tw_mask = w_size - 1;\r\n\r\n\t\t\thash_bits = memLevel + 7;\r\n\t\t\thash_size = 1 << hash_bits;\r\n\t\t\thash_mask = hash_size - 1;\r\n\t\t\thash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);\r\n\r\n\t\t\twindow = new Uint8Array(w_size * 2);\r\n\t\t\tprev = [];\r\n\t\t\thead = [];\r\n\r\n\t\t\tlit_bufsize = 1 << (memLevel + 6); // 16K elements by default\r\n\r\n\t\t\t// We overlay pending_buf and d_buf+l_buf. This works since the average\r\n\t\t\t// output size for (length,distance) codes is <= 24 bits.\r\n\t\t\tthat.pending_buf = new Uint8Array(lit_bufsize * 4);\r\n\t\t\tpending_buf_size = lit_bufsize * 4;\r\n\r\n\t\t\td_buf = Math.floor(lit_bufsize / 2);\r\n\t\t\tl_buf = (1 + 2) * lit_bufsize;\r\n\r\n\t\t\tlevel = _level;\r\n\r\n\t\t\tstrategy = _strategy;\r\n\t\t\tmethod = _method & 0xff;\r\n\r\n\t\t\treturn deflateReset(strm);\r\n\t\t};\r\n\r\n\t\tthat.deflateEnd = function() {\r\n\t\t\tif (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\t\t\t// Deallocate in reverse order of allocations:\r\n\t\t\tthat.pending_buf = null;\r\n\t\t\thead = null;\r\n\t\t\tprev = null;\r\n\t\t\twindow = null;\r\n\t\t\t// free\r\n\t\t\tthat.dstate = null;\r\n\t\t\treturn status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;\r\n\t\t};\r\n\r\n\t\tthat.deflateParams = function(strm, _level, _strategy) {\r\n\t\t\tvar err = Z_OK;\r\n\r\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION) {\r\n\t\t\t\t_level = 6;\r\n\t\t\t}\r\n\t\t\tif (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\tif (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {\r\n\t\t\t\t// Flush the last buffer:\r\n\t\t\t\terr = strm.deflate(Z_PARTIAL_FLUSH);\r\n\t\t\t}\r\n\r\n\t\t\tif (level != _level) {\r\n\t\t\t\tlevel = _level;\r\n\t\t\t\tmax_lazy_match = config_table[level].max_lazy;\r\n\t\t\t\tgood_match = config_table[level].good_length;\r\n\t\t\t\tnice_match = config_table[level].nice_length;\r\n\t\t\t\tmax_chain_length = config_table[level].max_chain;\r\n\t\t\t}\r\n\t\t\tstrategy = _strategy;\r\n\t\t\treturn err;\r\n\t\t};\r\n\r\n\t\tthat.deflateSetDictionary = function(strm, dictionary, dictLength) {\r\n\t\t\tvar length = dictLength;\r\n\t\t\tvar n, index = 0;\r\n\r\n\t\t\tif (!dictionary || status != INIT_STATE)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\r\n\t\t\tif (length < MIN_MATCH)\r\n\t\t\t\treturn Z_OK;\r\n\t\t\tif (length > w_size - MIN_LOOKAHEAD) {\r\n\t\t\t\tlength = w_size - MIN_LOOKAHEAD;\r\n\t\t\t\tindex = dictLength - length; // use the tail of the dictionary\r\n\t\t\t}\r\n\t\t\twindow.set(dictionary.subarray(index, index + length), 0);\r\n\r\n\t\t\tstrstart = length;\r\n\t\t\tblock_start = length;\r\n\r\n\t\t\t// Insert all strings in the hash table (except for the last two bytes).\r\n\t\t\t// s->lookahead stays null, so s->ins_h will be recomputed at the next\r\n\t\t\t// call of fill_window.\r\n\r\n\t\t\tins_h = window[0] & 0xff;\r\n\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[1] & 0xff)) & hash_mask;\r\n\r\n\t\t\tfor (n = 0; n <= length - MIN_MATCH; n++) {\r\n\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(n) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\r\n\t\t\t\tprev[n & w_mask] = head[ins_h];\r\n\t\t\t\thead[ins_h] = n;\r\n\t\t\t}\r\n\t\t\treturn Z_OK;\r\n\t\t};\r\n\r\n\t\tthat.deflate = function(_strm, flush) {\r\n\t\t\tvar i, header, level_flags, old_flush, bstate;\r\n\r\n\t\t\tif (flush > Z_FINISH || flush < 0) {\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\tif (!_strm.next_out || (!_strm.next_in && _strm.avail_in !== 0) || (status == FINISH_STATE && flush != Z_FINISH)) {\r\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_STREAM_ERROR)];\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\t\t\tif (_strm.avail_out === 0) {\r\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\r\n\t\t\t\treturn Z_BUF_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\tstrm = _strm; // just in case\r\n\t\t\told_flush = last_flush;\r\n\t\t\tlast_flush = flush;\r\n\r\n\t\t\t// Write the zlib header\r\n\t\t\tif (status == INIT_STATE) {\r\n\t\t\t\theader = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;\r\n\t\t\t\tlevel_flags = ((level - 1) & 0xff) >> 1;\r\n\r\n\t\t\t\tif (level_flags > 3)\r\n\t\t\t\t\tlevel_flags = 3;\r\n\t\t\t\theader |= (level_flags << 6);\r\n\t\t\t\tif (strstart !== 0)\r\n\t\t\t\t\theader |= PRESET_DICT;\r\n\t\t\t\theader += 31 - (header % 31);\r\n\r\n\t\t\t\tstatus = BUSY_STATE;\r\n\t\t\t\tputShortMSB(header);\r\n\t\t\t}\r\n\r\n\t\t\t// Flush as much pending output as possible\r\n\t\t\tif (that.pending !== 0) {\r\n\t\t\t\tstrm.flush_pending();\r\n\t\t\t\tif (strm.avail_out === 0) {\r\n\t\t\t\t\t// console.log(\" avail_out==0\");\r\n\t\t\t\t\t// Since avail_out is 0, deflate will be called again with\r\n\t\t\t\t\t// more output space, but possibly with both pending and\r\n\t\t\t\t\t// avail_in equal to zero. There won't be anything to do,\r\n\t\t\t\t\t// but this is not an error situation so make sure we\r\n\t\t\t\t\t// return OK instead of BUF_ERROR at next call of deflate:\r\n\t\t\t\t\tlast_flush = -1;\r\n\t\t\t\t\treturn Z_OK;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Make sure there is something to do and avoid duplicate\r\n\t\t\t\t// consecutive\r\n\t\t\t\t// flushes. For repeated and useless calls with Z_FINISH, we keep\r\n\t\t\t\t// returning Z_STREAM_END instead of Z_BUFF_ERROR.\r\n\t\t\t} else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {\r\n\t\t\t\tstrm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\r\n\t\t\t\treturn Z_BUF_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\t// User must not provide more input after the first FINISH:\r\n\t\t\tif (status == FINISH_STATE && strm.avail_in !== 0) {\r\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\r\n\t\t\t\treturn Z_BUF_ERROR;\r\n\t\t\t}\r\n\r\n\t\t\t// Start a new block or continue the current one.\r\n\t\t\tif (strm.avail_in !== 0 || lookahead !== 0 || (flush != Z_NO_FLUSH && status != FINISH_STATE)) {\r\n\t\t\t\tbstate = -1;\r\n\t\t\t\tswitch (config_table[level].func) {\r\n\t\t\t\tcase STORED:\r\n\t\t\t\t\tbstate = deflate_stored(flush);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase FAST:\r\n\t\t\t\t\tbstate = deflate_fast(flush);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase SLOW:\r\n\t\t\t\t\tbstate = deflate_slow(flush);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bstate == FinishStarted || bstate == FinishDone) {\r\n\t\t\t\t\tstatus = FINISH_STATE;\r\n\t\t\t\t}\r\n\t\t\t\tif (bstate == NeedMore || bstate == FinishStarted) {\r\n\t\t\t\t\tif (strm.avail_out === 0) {\r\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR next call, see above\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn Z_OK;\r\n\t\t\t\t\t// If flush != Z_NO_FLUSH && avail_out === 0, the next call\r\n\t\t\t\t\t// of deflate should use the same flush parameter to make sure\r\n\t\t\t\t\t// that the flush is complete. So we don't have to output an\r\n\t\t\t\t\t// empty block here, this will be done at next call. This also\r\n\t\t\t\t\t// ensures that for a very small output buffer, we emit at most\r\n\t\t\t\t\t// one empty block.\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (bstate == BlockDone) {\r\n\t\t\t\t\tif (flush == Z_PARTIAL_FLUSH) {\r\n\t\t\t\t\t\t_tr_align();\r\n\t\t\t\t\t} else { // FULL_FLUSH or SYNC_FLUSH\r\n\t\t\t\t\t\t_tr_stored_block(0, 0, false);\r\n\t\t\t\t\t\t// For a full flush, this empty block will be recognized\r\n\t\t\t\t\t\t// as a special marker by inflate_sync().\r\n\t\t\t\t\t\tif (flush == Z_FULL_FLUSH) {\r\n\t\t\t\t\t\t\t// state.head[s.hash_size-1]=0;\r\n\t\t\t\t\t\t\tfor (i = 0; i < hash_size/*-1*/; i++)\r\n\t\t\t\t\t\t\t\t// forget history\r\n\t\t\t\t\t\t\t\thead[i] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstrm.flush_pending();\r\n\t\t\t\t\tif (strm.avail_out === 0) {\r\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR at next call, see above\r\n\t\t\t\t\t\treturn Z_OK;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (flush != Z_FINISH)\r\n\t\t\t\treturn Z_OK;\r\n\t\t\treturn Z_STREAM_END;\r\n\t\t};\r\n\t}\r\n\r\n\t// ZStream\r\n\r\n\tfunction ZStream() {\r\n\t\tvar that = this;\r\n\t\tthat.next_in_index = 0;\r\n\t\tthat.next_out_index = 0;\r\n\t\t// that.next_in; // next input byte\r\n\t\tthat.avail_in = 0; // number of bytes available at next_in\r\n\t\tthat.total_in = 0; // total nb of input bytes read so far\r\n\t\t// that.next_out; // next output byte should be put there\r\n\t\tthat.avail_out = 0; // remaining free space at next_out\r\n\t\tthat.total_out = 0; // total nb of bytes output so far\r\n\t\t// that.msg;\r\n\t\t// that.dstate;\r\n\t}\r\n\r\n\tZStream.prototype = {\r\n\t\tdeflateInit : function(level, bits) {\r\n\t\t\tvar that = this;\r\n\t\t\tthat.dstate = new Deflate();\r\n\t\t\tif (!bits)\r\n\t\t\t\tbits = MAX_BITS;\r\n\t\t\treturn that.dstate.deflateInit(that, level, bits);\r\n\t\t},\r\n\r\n\t\tdeflate : function(flush) {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.dstate) {\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\t}\r\n\t\t\treturn that.dstate.deflate(that, flush);\r\n\t\t},\r\n\r\n\t\tdeflateEnd : function() {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.dstate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\tvar ret = that.dstate.deflateEnd();\r\n\t\t\tthat.dstate = null;\r\n\t\t\treturn ret;\r\n\t\t},\r\n\r\n\t\tdeflateParams : function(level, strategy) {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.dstate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\treturn that.dstate.deflateParams(that, level, strategy);\r\n\t\t},\r\n\r\n\t\tdeflateSetDictionary : function(dictionary, dictLength) {\r\n\t\t\tvar that = this;\r\n\t\t\tif (!that.dstate)\r\n\t\t\t\treturn Z_STREAM_ERROR;\r\n\t\t\treturn that.dstate.deflateSetDictionary(that, dictionary, dictLength);\r\n\t\t},\r\n\r\n\t\t// Read a new buffer from the current input stream, update the\r\n\t\t// total number of bytes read. All deflate() input goes through\r\n\t\t// this function so some applications may wish to modify it to avoid\r\n\t\t// allocating a large strm->next_in buffer and copying from it.\r\n\t\t// (See also flush_pending()).\r\n\t\tread_buf : function(buf, start, size) {\r\n\t\t\tvar that = this;\r\n\t\t\tvar len = that.avail_in;\r\n\t\t\tif (len > size)\r\n\t\t\t\tlen = size;\r\n\t\t\tif (len === 0)\r\n\t\t\t\treturn 0;\r\n\t\t\tthat.avail_in -= len;\r\n\t\t\tbuf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);\r\n\t\t\tthat.next_in_index += len;\r\n\t\t\tthat.total_in += len;\r\n\t\t\treturn len;\r\n\t\t},\r\n\r\n\t\t// Flush as much pending output as possible. All deflate() output goes\r\n\t\t// through this function so some applications may wish to modify it\r\n\t\t// to avoid allocating a large strm->next_out buffer and copying into it.\r\n\t\t// (See also read_buf()).\r\n\t\tflush_pending : function() {\r\n\t\t\tvar that = this;\r\n\t\t\tvar len = that.dstate.pending;\r\n\r\n\t\t\tif (len > that.avail_out)\r\n\t\t\t\tlen = that.avail_out;\r\n\t\t\tif (len === 0)\r\n\t\t\t\treturn;\r\n\r\n\t\t\t// if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index\r\n\t\t\t// || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\r\n\t\t\t// len)) {\r\n\t\t\t// console.log(that.dstate.pending_buf.length + \", \" + that.dstate.pending_out + \", \" + that.next_out.length + \", \" +\r\n\t\t\t// that.next_out_index + \", \" + len);\r\n\t\t\t// console.log(\"avail_out=\" + that.avail_out);\r\n\t\t\t// }\r\n\r\n\t\t\tthat.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\r\n\r\n\t\t\tthat.next_out_index += len;\r\n\t\t\tthat.dstate.pending_out += len;\r\n\t\t\tthat.total_out += len;\r\n\t\t\tthat.avail_out -= len;\r\n\t\t\tthat.dstate.pending -= len;\r\n\t\t\tif (that.dstate.pending === 0) {\r\n\t\t\t\tthat.dstate.pending_out = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Deflater\r\n\r\n\tfunction Deflater(level) {\r\n\t\tvar that = this;\r\n\t\tvar z = new ZStream();\r\n\t\tvar bufsize = 512;\r\n\t\tvar flush = Z_NO_FLUSH;\r\n\t\tvar buf = new Uint8Array(bufsize);\r\n\r\n\t\tif (typeof level == \"undefined\")\r\n\t\t\tlevel = Z_DEFAULT_COMPRESSION;\r\n\t\tz.deflateInit(level);\r\n\t\tz.next_out = buf;\r\n\r\n\t\tthat.append = function(data, onprogress) {\r\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\r\n\t\t\tif (!data.length)\r\n\t\t\t\treturn;\r\n\t\t\tz.next_in_index = 0;\r\n\t\t\tz.next_in = data;\r\n\t\t\tz.avail_in = data.length;\r\n\t\t\tdo {\r\n\t\t\t\tz.next_out_index = 0;\r\n\t\t\t\tz.avail_out = bufsize;\r\n\t\t\t\terr = z.deflate(flush);\r\n\t\t\t\tif (err != Z_OK)\r\n\t\t\t\t\tthrow \"deflating: \" + z.msg;\r\n\t\t\t\tif (z.next_out_index)\r\n\t\t\t\t\tif (z.next_out_index == bufsize)\r\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\r\n\t\t\t\tbufferSize += z.next_out_index;\r\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\r\n\t\t\t\t\tonprogress(z.next_in_index);\r\n\t\t\t\t\tlastIndex = z.next_in_index;\r\n\t\t\t\t}\r\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\r\n\t\t\tarray = new Uint8Array(bufferSize);\r\n\t\t\tbuffers.forEach(function(chunk) {\r\n\t\t\t\tarray.set(chunk, bufferIndex);\r\n\t\t\t\tbufferIndex += chunk.length;\r\n\t\t\t});\r\n\t\t\treturn array;\r\n\t\t};\r\n\t\tthat.flush = function() {\r\n\t\t\tvar err, buffers = [], bufferIndex = 0, bufferSize = 0, array;\r\n\t\t\tdo {\r\n\t\t\t\tz.next_out_index = 0;\r\n\t\t\t\tz.avail_out = bufsize;\r\n\t\t\t\terr = z.deflate(Z_FINISH);\r\n\t\t\t\tif (err != Z_STREAM_END && err != Z_OK)\r\n\t\t\t\t\tthrow \"deflating: \" + z.msg;\r\n\t\t\t\tif (bufsize - z.avail_out > 0)\r\n\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\r\n\t\t\t\tbufferSize += z.next_out_index;\r\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\r\n\t\t\tz.deflateEnd();\r\n\t\t\tarray = new Uint8Array(bufferSize);\r\n\t\t\tbuffers.forEach(function(chunk) {\r\n\t\t\t\tarray.set(chunk, bufferIndex);\r\n\t\t\t\tbufferIndex += chunk.length;\r\n\t\t\t});\r\n\t\t\treturn array;\r\n\t\t};\r\n\t}\r\n\r\n\tvar deflater;\r\n\r\n\tif (obj.zip)\r\n\t\tobj.zip.Deflater = Deflater;\r\n\telse {\r\n\t\tdeflater = new Deflater();\r\n\t\tobj.addEventListener(\"message\", function(event) {\r\n\t\t\tvar message = event.data;\r\n\t\t\tif (message.init) {\r\n\t\t\t\tdeflater = new Deflater(message.level);\r\n\t\t\t\tobj.postMessage({\r\n\t\t\t\t\toninit : true\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (message.append)\r\n\t\t\t\tobj.postMessage({\r\n\t\t\t\t\tonappend : true,\r\n\t\t\t\t\tdata : deflater.append(message.data, function(current) {\r\n\t\t\t\t\t\tobj.postMessage({\r\n\t\t\t\t\t\t\tprogress : true,\r\n\t\t\t\t\t\t\tcurrent : current\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\tif (message.flush)\r\n\t\t\t\tobj.postMessage({\r\n\t\t\t\t\tonflush : true,\r\n\t\t\t\t\tdata : deflater.flush()\r\n\t\t\t\t});\r\n\t\t}, false);\r\n\t}\r\n\r\n})(self);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/string-replace-webpack-plugin/loader.js?id=46enoss63qo!./node_modules/string-replace-webpack-plugin/loader.js?id=a8sr984qkj!./node_modules/terriajs/buildprocess/removeCesiumDebugPragmas.js!./node_modules/terriajs-cesium/Source/ThirdParty/Workers/deflate.js\n// module id = 0\n// module chunks = 0"],"sourceRoot":""}